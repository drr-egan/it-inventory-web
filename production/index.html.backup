<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IT Inventory Management</title>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/papaparse@5/papaparse.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.4.120/pdf.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://unpkg.com/pdf-lib@1.17.1/dist/pdf-lib.min.js"></script>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect } = React;

        const AppDebug = () => {
            const [count, setCount] = useState(0);
            
            return (
                <div style={{ padding: '40px', fontFamily: 'Arial, sans-serif' }}>
                    <h1 style={{ color: 'green', fontSize: '32px' }}>React App is Working!</h1>
                    <p>Count: {count}</p>
                    <button 
                        onClick={() => setCount(count + 1)}
                        style={{ 
                            padding: '10px 20px', 
                            fontSize: '16px', 
                            backgroundColor: '#007bff', 
                            color: 'white', 
                            border: 'none', 
                            borderRadius: '4px',
                            cursor: 'pointer'
                        }}
                    >
                        Increment
                    </button>
                    <p>Current time: {new Date().toLocaleTimeString()}</p>
                </div>
            );
        };

        const App = () => {
            // State management
            const [activeTab, setActiveTab] = useState('shop');
            const [items, setItems] = useState([]);
            const [users, setUsers] = useState([]);
            const [checkoutHistory, setCheckoutHistory] = useState([]);
            const [cart, setCart] = useState([]);
            const [notifications, setNotifications] = useState([]);
            const [categoryFilter, setCategoryFilter] = useState('All');
            const [searchQuery, setSearchQuery] = useState('');
            const [barcodeInput, setBarcodeInput] = useState('');
            const [adminBarcodeInput, setAdminBarcodeInput] = useState('');
            const [showAdminQuantityModal, setShowAdminQuantityModal] = useState(false);
            const [scannedItem, setScannedItem] = useState(null);
            const [quantityUpdate, setQuantityUpdate] = useState('');
            const [showCategoryManager, setShowCategoryManager] = useState(false);
            const [newCategory, setNewCategory] = useState('');
            const [editingItem, setEditingItem] = useState(null);
            const [showBulkUpdate, setShowBulkUpdate] = useState(false);
            const [selectedItems, setSelectedItems] = useState([]);
            const [bulkUpdateCategory, setBulkUpdateCategory] = useState('');

            // File upload states
            const [selectedUserFile, setSelectedUserFile] = useState(null);
            const [userUploadStatus, setUserUploadStatus] = useState('');

            // User admin states
            const [showAddUserForm, setShowAddUserForm] = useState(false);
            const [newUserFirstName, setNewUserFirstName] = useState('');
            const [newUserLastName, setNewUserLastName] = useState('');
            const [newUserCostCode, setNewUserCostCode] = useState('');
            const [addUserStatus, setAddUserStatus] = useState('');
            const [editingUser, setEditingUser] = useState(null);
            const [editUserStatus, setEditUserStatus] = useState('');
            const [adminUserSearchTerm, setAdminUserSearchTerm] = useState('');

            const [selectedItemFile, setSelectedItemFile] = useState(null);
            const [itemUploadStatus, setItemUploadStatus] = useState('');
            const [selectedHistoryFile, setSelectedHistoryFile] = useState(null);
            const [historyUploadStatus, setHistoryUploadStatus] = useState('');

            // Shipment processing states
            const [selectedShipmentItems, setSelectedShipmentItems] = useState([]);
            const [shipmentSearchQuery, setShipmentSearchQuery] = useState('');
            const [showQuantityModal, setShowQuantityModal] = useState(false);
            const [itemQuantities, setItemQuantities] = useState({});
            const [itemPrices, setItemPrices] = useState({});
            const [selectedPdfFile, setSelectedPdfFile] = useState(null);
            const [shipmentTax, setShipmentTax] = useState(0);
            const [shipmentFees, setShipmentFees] = useState(0);

            // Sort configurations
            const [itemSortConfig, setItemSortConfig] = useState({ key: 'name', direction: 'ascending' });
            const [userSortConfig, setUserSortConfig] = useState({ key: 'lastName', direction: 'ascending' });
            const [historySortConfig, setHistorySortConfig] = useState({ key: 'dateEntered', direction: 'descending' });

            // Bulk inventory states
            const [bulkInventorySearch, setBulkInventorySearch] = useState('');
            const [bulkInventoryCategoryFilter, setBulkInventoryCategoryFilter] = useState('All');
            const [bulkQuantities, setBulkQuantities] = useState({});
            const [bulkPrices, setBulkPrices] = useState({});
            const [selectedBulkFile, setSelectedBulkFile] = useState(null);
            const [bulkUploadStatus, setBulkUploadStatus] = useState('');
            const [bulkEditingItems, setBulkEditingItems] = useState(new Set());
            const [isScanMode, setIsScanMode] = useState(false);
            const [bulkBarcodeInput, setBulkBarcodeInput] = useState('');
            const [recentlyScannedItems, setRecentlyScannedItems] = useState(new Set());
            const [scanCount, setScanCount] = useState(0);
            
            // Manual item creation states
            const [showAddItemForm, setShowAddItemForm] = useState(false);
            const [newItemName, setNewItemName] = useState('');
            const [newItemPrice, setNewItemPrice] = useState('');
            const [newItemQuantity, setNewItemQuantity] = useState('');
            const [newItemASIN, setNewItemASIN] = useState('');
            const [newItemCategory, setNewItemCategory] = useState('');
            const [addItemStatus, setAddItemStatus] = useState('');

            // Checkout History Edit/Delete State
            const [editingHistoryRecord, setEditingHistoryRecord] = useState(null);
            const [editHistoryStatus, setEditHistoryStatus] = useState('');

            // Cart Checkout State
            const [selectedUser, setSelectedUser] = useState(null);
            const [userSearchTerm, setUserSearchTerm] = useState('');
            const [showUserDropdown, setShowUserDropdown] = useState(false);

            // Billing method state
            const [billingMethod, setBillingMethod] = useState('user'); // 'user' or 'job'
            const [jobNumber, setJobNumber] = useState('');

            // Cart popup state
            const [showCartPopup, setShowCartPopup] = useState(false);
            const [cartPopupItem, setCartPopupItem] = useState(null);

            // API Base URL
            const API_BASE = 'http://172.22.71.200:3001';

            // Load data on component mount
            useEffect(() => {
                fetchItems();
                fetchUsers();
                fetchCheckoutHistory();
            }, []);

            // Generate notifications when items change
            useEffect(() => {
                const lowStockItems = items.filter(item => item.quantity <= item.minThreshold);
                setNotifications(lowStockItems.map(item => ({
                    id: item.id,
                    message: item.quantity === 0 ? `Out of stock: ${item.name}` : `Low stock: ${item.name} (${item.quantity} remaining)`,
                    type: 'warning'
                })));
            }, [items]);

            // Fetch functions
            const fetchItems = async () => {
                try {
                    console.log('🔄 Refreshing items from database...');
                    const response = await fetch(`${API_BASE}/items`);
                    const data = await response.json();
                    console.log('📦 Fetched items:', data.length, 'items');
                    setItems(data);
                    console.log('✅ Items state updated');
                } catch (error) {
                    console.error('❌ Error fetching items:', error);
                }
            };

            const fetchUsers = async () => {
                try {
                    const response = await fetch(`${API_BASE}/users`);
                    const data = await response.json();
                    setUsers(data);
                } catch (error) {
                    console.error('Error fetching users:', error);
                }
            };

            const fetchCheckoutHistory = async () => {
                try {
                    const response = await fetch(`${API_BASE}/checkoutHistory`);
                    const data = await response.json();
                    setCheckoutHistory(data);
                } catch (error) {
                    console.error('Error fetching checkout history:', error);
                }
            };

            // Cart functions
            const addToCart = (item) => {
                const existingItem = cart.find(cartItem => cartItem.id === item.id);
                if (existingItem) {
                    setCart(cart.map(cartItem =>
                        cartItem.id === item.id
                            ? { ...cartItem, quantity: cartItem.quantity + 1 }
                            : cartItem
                    ));
                } else {
                    setCart([...cart, { ...item, quantity: 1 }]);
                }
                
                // Show confirmation popup
                setCartPopupItem(item);
                setShowCartPopup(true);
                
                // Auto-hide popup after 3 seconds
                setTimeout(() => {
                    setShowCartPopup(false);
                    setCartPopupItem(null);
                }, 3000);
            };

            const handleBarcodeInput = (e) => {
                const value = e.target.value;
                setBarcodeInput(value);
                
                // Auto-process when Enter is pressed or when a complete barcode is detected
                if (e.key === 'Enter' || value.endsWith('\n')) {
                    processBarcodeInput(value.trim().replace(/\n/g, ''));
                }
            };

            const processBarcodeInput = (barcodeValue) => {
                if (!barcodeValue) return;
                
                // Find item by exact name match (case-insensitive)
                const foundItem = items.find(item => 
                    item.name.toLowerCase() === barcodeValue.toLowerCase()
                );
                
                if (foundItem) {
                    if (foundItem.quantity > 0) {
                        addToCart(foundItem);
                        setBarcodeInput(''); // Clear input after successful add
                        // Show success feedback
                        const originalBg = document.getElementById('barcode-input')?.style.backgroundColor;
                        if (document.getElementById('barcode-input')) {
                            document.getElementById('barcode-input').style.backgroundColor = '#dcfce7';
                            setTimeout(() => {
                                document.getElementById('barcode-input').style.backgroundColor = originalBg || '';
                            }, 500);
                        }
                    } else {
                        alert(`"${foundItem.name}" is out of stock`);
                        setBarcodeInput('');
                    }
                } else {
                    alert(`Item "${barcodeValue}" not found`);
                    setBarcodeInput('');
                }
            };

            const handleManualBarcodeSubmit = () => {
                processBarcodeInput(barcodeInput);
            };

            // Admin barcode functions
            const handleAdminBarcodeInput = (e) => {
                const value = e.target.value;
                setAdminBarcodeInput(value);
                
                // Auto-process when Enter is pressed or when a complete barcode is detected
                if (e.key === 'Enter' || value.endsWith('\n')) {
                    processAdminBarcodeInput(value.trim().replace(/\n/g, ''));
                }
            };

            const processAdminBarcodeInput = (barcodeValue) => {
                if (!barcodeValue) return;
                
                // Find item by exact name match (case-insensitive)
                const foundItem = items.find(item => 
                    item.name.toLowerCase() === barcodeValue.toLowerCase()
                );
                
                if (foundItem) {
                    setScannedItem(foundItem);
                    setQuantityUpdate('');
                    setShowAdminQuantityModal(true);
                    setAdminBarcodeInput(''); // Clear barcode input
                } else {
                    alert(`Item "${barcodeValue}" not found`);
                    setAdminBarcodeInput('');
                }
            };

            const handleManualAdminBarcodeSubmit = () => {
                processAdminBarcodeInput(adminBarcodeInput);
            };

            const updateItemQuantity = async () => {
                if (!scannedItem || quantityUpdate === '') {
                    alert('Please enter a quantity');
                    return;
                }

                const newQuantity = parseInt(quantityUpdate);
                if (isNaN(newQuantity) || newQuantity < 0) {
                    alert('Please enter a valid quantity (0 or greater)');
                    return;
                }

                try {
                    await fetch(`${API_BASE}/items/${scannedItem.id}`, {
                        method: 'PATCH',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ quantity: newQuantity })
                    });

                    // Update local state
                    setItems(items.map(item => 
                        item.id === scannedItem.id 
                            ? { ...item, quantity: newQuantity }
                            : item
                    ));

                    // Close modal and reset states
                    setShowAdminQuantityModal(false);
                    setScannedItem(null);
                    setQuantityUpdate('');
                    
                    // Refocus barcode input for rapid scanning
                    setTimeout(() => {
                        document.getElementById('admin-barcode-input')?.focus();
                    }, 100);

                } catch (error) {
                    console.error('Error updating item quantity:', error);
                    alert('Error updating item quantity');
                }
            };

            const cancelQuantityUpdate = () => {
                setShowAdminQuantityModal(false);
                setScannedItem(null);
                setQuantityUpdate('');
                // Refocus barcode input
                setTimeout(() => {
                    document.getElementById('admin-barcode-input')?.focus();
                }, 100);
            };

            const removeFromCart = (itemId) => {
                setCart(cart.filter(item => item.id !== itemId));
            };

            const updateCartQuantity = (itemId, quantity) => {
                if (quantity <= 0) {
                    removeFromCart(itemId);
                } else {
                    setCart(cart.map(item =>
                        item.id === itemId ? { ...item, quantity } : item
                    ));
                }
            };

            // Checkout function
            // Handle user selection for checkout
            const handleUserSelect = (user) => {
                setSelectedUser(user);
                setUserSearchTerm(`${user.firstName} ${user.lastName}`);
                setShowUserDropdown(false);
            };

            // Handle checkout submission with selected user
            const handleCheckout = async () => {
                // Validate based on billing method
                if (billingMethod === 'user' && !selectedUser) {
                    alert('Please select a user for checkout.');
                    return;
                }
                
                if (billingMethod === 'job' && !jobNumber.trim()) {
                    alert('Please enter a job number for checkout.');
                    return;
                }

                const user = selectedUser;
                try {
                    // Update item quantities (prevent negative quantities)
                    for (const cartItem of cart) {
                        const item = items.find(i => i.id === cartItem.id);
                        if (item) {
                            const newQuantity = Math.max(0, item.quantity - cartItem.quantity);
                            await fetch(`${API_BASE}/items/${item.id}`, {
                                method: 'PATCH',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    quantity: newQuantity
                                })
                            });
                        }
                    }

                    // Add to checkout history
                    for (const cartItem of cart) {
                        await fetch(`${API_BASE}/checkoutHistory`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
                                itemName: cartItem.name,
                                userName: billingMethod === 'job' ? 'Bill to Job' : `${user.firstName} ${user.lastName}`,
                                departmentId: billingMethod === 'job' ? `Job ${jobNumber.trim()}` : (user.cost_code || user.costCode),
                                jobNumber: billingMethod === 'job' ? `Job ${jobNumber.trim()}` : '',
                                quantity: cartItem.quantity,
                                dateEntered: new Date().toISOString()
                            })
                        });
                    }

                    // Clear cart and refresh data
                    setCart([]);
                    setSelectedUser(null);
                    setJobNumber('');
                    setUserSearchTerm('');
                    setShowUserDropdown(false);
                    fetchItems();
                    fetchCheckoutHistory();
                    alert('Checkout completed successfully!');
                } catch (error) {
                    console.error('Error during checkout:', error);
                    alert('Error during checkout. Please try again.');
                }
            };

            // CSV upload handlers
            const handleUserCsvProcess = () => {
                if (!selectedUserFile) return;

                Papa.parse(selectedUserFile, {
                    header: true,
                    skipEmptyLines: true,
                    complete: async (results) => {
                        try {
                            setUserUploadStatus('Processing...');
                            
                            for (const row of results.data) {
                                if (row.FirstName && row.LastName && row.CostCode) {
                                    await fetch(`${API_BASE}/users`, {
                                        method: 'POST',
                                        headers: { 'Content-Type': 'application/json' },
                                        body: JSON.stringify({
                                            id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
                                            firstName: row.FirstName,
                                            lastName: row.LastName,
                                            costCode: row.CostCode
                                        })
                                    });
                                }
                            }

                            fetchUsers();
                            setUserUploadStatus(`Successfully uploaded ${results.data.length} users`);
                            setSelectedUserFile(null);
                        } catch (error) {
                            setUserUploadStatus('Error uploading users');
                            console.error('Error uploading users:', error);
                        }
                    }
                });
            };

            // User Admin Functions
            const handleAddUser = async () => {
                if (!newUserFirstName.trim() || !newUserLastName.trim() || !newUserCostCode.trim()) {
                    setAddUserStatus('All fields are required');
                    return;
                }

                try {
                    setAddUserStatus('Adding user...');
                    
                    const response = await fetch(`${API_BASE}/users`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
                            firstName: newUserFirstName.trim(),
                            lastName: newUserLastName.trim(),
                            costCode: newUserCostCode.trim()
                        })
                    });

                    if (response.ok) {
                        setAddUserStatus('User added successfully!');
                        setNewUserFirstName('');
                        setNewUserLastName('');
                        setNewUserCostCode('');
                        setShowAddUserForm(false);
                        fetchUsers();
                        setTimeout(() => setAddUserStatus(''), 3000);
                    } else {
                        setAddUserStatus('Error adding user');
                    }
                } catch (error) {
                    setAddUserStatus('Error adding user');
                    console.error('Error adding user:', error);
                }
            };

            const handleEditUser = (user) => {
                setEditingUser({
                    ...user,
                    firstName: user.firstName,
                    lastName: user.lastName,
                    costCode: user.cost_code || user.costCode
                });
                setEditUserStatus('');
            };

            const handleSaveUser = async () => {
                if (!editingUser.firstName.trim() || !editingUser.lastName.trim() || !editingUser.costCode.trim()) {
                    setEditUserStatus('All fields are required');
                    return;
                }

                try {
                    setEditUserStatus('Saving...');

                    const response = await fetch(`${API_BASE}/users/${editingUser.id}`, {
                        method: 'PATCH',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            firstName: editingUser.firstName.trim(),
                            lastName: editingUser.lastName.trim(),
                            costCode: editingUser.costCode.trim()
                        })
                    });

                    if (response.ok) {
                        setEditUserStatus('User updated successfully!');
                        setEditingUser(null);
                        fetchUsers();
                        setTimeout(() => setEditUserStatus(''), 3000);
                    } else {
                        setEditUserStatus('Error updating user');
                    }
                } catch (error) {
                    setEditUserStatus('Error updating user');
                    console.error('Error updating user:', error);
                }
            };

            const handleDeleteUser = async (user) => {
                if (!confirm(`Are you sure you want to delete ${user.firstName} ${user.lastName}?`)) {
                    return;
                }

                try {
                    const response = await fetch(`${API_BASE}/users/${user.id}`, {
                        method: 'DELETE'
                    });

                    if (response.ok) {
                        fetchUsers();
                        if (editingUser && editingUser.id === user.id) {
                            setEditingUser(null);
                        }
                    } else {
                        alert('Error deleting user');
                    }
                } catch (error) {
                    alert('Error deleting user');
                    console.error('Error deleting user:', error);
                }
            };

            const cancelEditingUser = () => {
                setEditingUser(null);
                setEditUserStatus('');
            };

            const handleItemCsvProcess = () => {
                if (!selectedItemFile) return;

                Papa.parse(selectedItemFile, {
                    header: true,
                    skipEmptyLines: true,
                    complete: async (results) => {
                        try {
                            setItemUploadStatus('Processing...');
                            
                            for (const row of results.data) {
                                if (row.Item && row['Stock Quantity']) {
                                    await fetch(`${API_BASE}/items`, {
                                        method: 'POST',
                                        headers: { 'Content-Type': 'application/json' },
                                        body: JSON.stringify({
                                            id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
                                            name: row.Item,
                                            quantity: parseInt(row['Stock Quantity']) || 0,
                                            price: parseFloat(row.Price) || 0,
                                            minThreshold: 5,
                                            asin: row.ASIN || '',
                                            category: row.Category || 'Uncategorized'
                                        })
                                    });
                                }
                            }

                            fetchItems();
                            setItemUploadStatus(`Successfully uploaded ${results.data.length} items`);
                            setSelectedItemFile(null);
                        } catch (error) {
                            setItemUploadStatus('Error uploading items');
                            console.error('Error uploading items:', error);
                        }
                    }
                });
            };

            // Utility function to format department IDs consistently as X-XX-XXX-5770
            const formatDepartmentId = (deptId) => {
                if (!deptId) return deptId;
                
                const deptStr = deptId.toString();
                
                // If already properly formatted with 5770, return as-is
                if (deptStr.match(/^\d-\d{2}-\d{3}-5770$/)) {
                    return deptStr;
                }
                
                // If it contains dashes, split and format
                if (deptStr.includes('-')) {
                    const parts = deptStr.split('-');
                    
                    if (parts.length >= 3) {
                        // Format: X-XX-XXX-5770
                        const businessType = parts[0].padStart(1, '0');
                        const division = parts[1].padStart(2, '0');
                        let department = parts[2];
                        
                        // Ensure department is exactly 3 digits
                        if (department.length > 3) {
                            department = department.substring(0, 3);
                        } else if (department.length < 3) {
                            department = department.padStart(3, '0');
                        }
                        
                        return `${businessType}-${division}-${department}-5770`;
                    } else if (parts.length === 2) {
                        // Only business type and division provided
                        const businessType = parts[0].padStart(1, '0');
                        const division = parts[1].padStart(2, '0');
                        return `${businessType}-${division}-000-5770`;
                    }
                }
                
                // Handle formats without dashes (like "2200600")
                // Parse by removing leading zeros from each segment
                if (deptStr.match(/^\d{4,7}$/)) {
                    // Try different parsing strategies based on typical patterns
                    
                    // For 7-digit numbers like "2200600" -> "2-20-0600" -> "2-20-600"
                    if (deptStr.length === 7) {
                        const businessType = deptStr.substring(0, 1);
                        const division = deptStr.substring(1, 3);
                        let department = deptStr.substring(3, 7);
                        
                        // Remove leading zeros but ensure at least 1 digit
                        department = department.replace(/^0+/, '') || '0';
                        // Ensure department is max 3 digits
                        if (department.length > 3) {
                            department = department.substring(0, 3);
                        }
                        
                        return `${businessType}-${division}-${department}-5770`;
                    }
                    
                    // For 6-digit numbers like "220600" -> "2-20-600"
                    if (deptStr.length === 6) {
                        const businessType = deptStr.substring(0, 1);
                        const division = deptStr.substring(1, 3);
                        let department = deptStr.substring(3, 6);
                        
                        // Remove leading zeros but ensure at least 1 digit
                        department = department.replace(/^0+/, '') || '0';
                        
                        return `${businessType}-${division}-${department}-5770`;
                    }
                    
                    // For 5-digit numbers like "22060" -> "2-20-60"
                    if (deptStr.length === 5) {
                        const businessType = deptStr.substring(0, 1);
                        const division = deptStr.substring(1, 3);
                        let department = deptStr.substring(3, 5);
                        
                        // Remove leading zeros but ensure at least 1 digit
                        department = department.replace(/^0+/, '') || '0';
                        
                        return `${businessType}-${division}-${department}-5770`;
                    }
                    
                    // For 4-digit numbers like "2206" -> "2-20-6"
                    if (deptStr.length === 4) {
                        const businessType = deptStr.substring(0, 1);
                        const division = deptStr.substring(1, 3);
                        let department = deptStr.substring(3, 4);
                        
                        return `${businessType}-${division}-${department}-5770`;
                    }
                }
                
                // Default: append 5770 to whatever we have
                return `${deptStr}-5770`;
            };

            const handleHistoryCsvProcess = () => {
                if (!selectedHistoryFile) return;

                Papa.parse(selectedHistoryFile, {
                    header: true,
                    skipEmptyLines: true,
                    complete: async (results) => {
                        try {
                            setHistoryUploadStatus('Processing...');
                            
                            for (const row of results.data) {
                                if (row.ItemName && row.UserName && row.DepartmentId) {
                                    try {
                                        const formattedDeptId = formatDepartmentId(row.DepartmentId);
                                        console.log(`Formatting ${row.DepartmentId} → ${formattedDeptId}`);
                                        
                                        const response = await fetch(`${API_BASE}/checkoutHistory`, {
                                            method: 'POST',
                                            headers: { 'Content-Type': 'application/json' },
                                            body: JSON.stringify({
                                                id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
                                                itemName: row.ItemName,
                                                userName: row.UserName,
                                                departmentId: formattedDeptId,
                                                jobNum: (row.JobNum && row.JobNum !== 'NULL') ? row.JobNum : '',
                                                quantity: 1,
                                                dateEntered: row.DateEntered || new Date().toISOString()
                                            })
                                        });
                                        
                                        if (!response.ok) {
                                            console.error('API Error:', response.status, response.statusText);
                                            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                                        }
                                    } catch (rowError) {
                                        console.error('Error processing row:', row, rowError);
                                        throw rowError;
                                    }
                                }
                            }

                            fetchCheckoutHistory();
                            setHistoryUploadStatus(`Successfully uploaded ${results.data.length} records`);
                            setSelectedHistoryFile(null);
                        } catch (error) {
                            setHistoryUploadStatus('Error uploading history');
                            console.error('Error uploading history:', error);
                        }
                    }
                });
            };

            const clearAllHistory = async () => {
                if (!confirm('Are you sure you want to delete ALL checkout history? This action cannot be undone.')) {
                    return;
                }

                try {
                    // Delete all checkout history entries
                    const deletePromises = checkoutHistory.map(entry => 
                        fetch(`${API_BASE}/checkoutHistory/${entry.id}`, {
                            method: 'DELETE'
                        })
                    );

                    await Promise.all(deletePromises);
                    
                    // Refresh the checkout history
                    fetchCheckoutHistory();
                    setHistoryUploadStatus(`Successfully cleared ${checkoutHistory.length} history records`);
                    
                    // Clear status after 3 seconds
                    setTimeout(() => {
                        setHistoryUploadStatus('');
                    }, 3000);
                    
                } catch (error) {
                    setHistoryUploadStatus('Error clearing history');
                    console.error('Error clearing checkout history:', error);
                }
            };

            // Edit checkout history record
            const handleEditHistoryRecord = (record) => {
                setEditingHistoryRecord({ ...record });
            };

            // Save edited checkout history record
            const handleSaveHistoryRecord = async () => {
                if (!editingHistoryRecord) return;

                try {
                    const response = await fetch(`${API_BASE}/checkoutHistory/${editingHistoryRecord.id}`, {
                        method: 'PATCH',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            itemName: editingHistoryRecord.itemName,
                            userName: editingHistoryRecord.userName,
                            departmentId: editingHistoryRecord.departmentId,
                            jobNumber: editingHistoryRecord.jobNumber || editingHistoryRecord.jobNum,
                            notes: editingHistoryRecord.notes || ''
                        })
                    });

                    if (response.ok) {
                        fetchCheckoutHistory();
                        setEditingHistoryRecord(null);
                        setEditHistoryStatus('Record updated successfully!');
                        setTimeout(() => setEditHistoryStatus(''), 3000);
                    } else {
                        throw new Error('Failed to update record');
                    }
                } catch (error) {
                    console.error('Error updating checkout history record:', error);
                    setEditHistoryStatus('Error updating record');
                    setTimeout(() => setEditHistoryStatus(''), 3000);
                }
            };

            // Delete checkout history record
            const handleDeleteHistoryRecord = async (recordId) => {
                if (!confirm('Are you sure you want to delete this checkout record? This action cannot be undone.')) {
                    return;
                }

                try {
                    const response = await fetch(`${API_BASE}/checkoutHistory/${recordId}`, {
                        method: 'DELETE'
                    });

                    if (response.ok) {
                        fetchCheckoutHistory();
                        setEditHistoryStatus('Record deleted successfully!');
                        setTimeout(() => setEditHistoryStatus(''), 3000);
                    } else {
                        throw new Error('Failed to delete record');
                    }
                } catch (error) {
                    console.error('Error deleting checkout history record:', error);
                    setEditHistoryStatus('Error deleting record');
                    setTimeout(() => setEditHistoryStatus(''), 3000);
                }
            };

            // Cancel editing
            const handleCancelEdit = () => {
                setEditingHistoryRecord(null);
            };

            // Sorting functions
            const sortData = (data, config) => {
                return [...data].sort((a, b) => {
                    let aValue = a[config.key];
                    let bValue = b[config.key];
                    
                    // Handle job number field compatibility
                    if (config.key === 'jobNum') {
                        aValue = a.jobNum || a.jobNumber || '';
                        bValue = b.jobNum || b.jobNumber || '';
                    }
                    
                    if (aValue < bValue) {
                        return config.direction === 'ascending' ? -1 : 1;
                    }
                    if (aValue > bValue) {
                        return config.direction === 'ascending' ? 1 : -1;
                    }
                    return 0;
                });
            };

            const handleSort = (key, setConfig, config) => {
                const direction = config.key === key && config.direction === 'ascending' ? 'descending' : 'ascending';
                setConfig({ key, direction });
            };

            // Bulk inventory functions
            const handleBulkQuantityChange = (itemId, quantity) => {
                setBulkQuantities({
                    ...bulkQuantities,
                    [itemId]: parseInt(quantity) >= 0 ? parseInt(quantity) : 0
                });
            };

            const handleBulkPriceChange = (itemId, price) => {
                setBulkPrices({
                    ...bulkPrices,
                    [itemId]: parseFloat(price) >= 0 ? parseFloat(price) : 0
                });
            };

            const saveBulkItem = async (itemId) => {
                const newQuantity = bulkQuantities[itemId];
                const newPrice = bulkPrices[itemId];
                
                // Prepare update data
                const updateData = {};
                if (newQuantity !== undefined) {
                    updateData.quantity = newQuantity;
                }
                if (newPrice !== undefined) {
                    updateData.price = newPrice;
                }
                
                if (Object.keys(updateData).length === 0) return;

                try {
                    await fetch(`${API_BASE}/items/${itemId}`, {
                        method: 'PATCH',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(updateData)
                    });

                    // Update local state
                    setItems(items.map(item => 
                        item.id === itemId ? { ...item, ...updateData } : item
                    ));

                    // Remove from editing set
                    const newEditing = new Set(bulkEditingItems);
                    newEditing.delete(itemId);
                    setBulkEditingItems(newEditing);

                    // Clear the bulk changes
                    const newBulkQuantities = { ...bulkQuantities };
                    const newBulkPrices = { ...bulkPrices };
                    delete newBulkQuantities[itemId];
                    delete newBulkPrices[itemId];
                    setBulkQuantities(newBulkQuantities);
                    setBulkPrices(newBulkPrices);

                } catch (error) {
                    console.error('Error updating item:', error);
                    alert('Error updating item');
                }
            };

            const setAllQuantitiesToZero = async () => {
                if (!confirm('Are you sure you want to set ALL item quantities to zero? This cannot be undone.')) return;

                try {
                    const updatePromises = items.filter(item => !item.name.startsWith('_CATEGORY_PLACEHOLDER_')).map(item =>
                        fetch(`${API_BASE}/items/${item.id}`, {
                            method: 'PATCH',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ quantity: 0 })
                        })
                    );

                    await Promise.all(updatePromises);
                    fetchItems(); // Refresh data
                    alert('All item quantities set to zero');
                } catch (error) {
                    console.error('Error setting quantities to zero:', error);
                    alert('Error updating quantities');
                }
            };

            const exportBulkInventory = () => {
                const inventoryData = items
                    .filter(item => !item.name.startsWith('_CATEGORY_PLACEHOLDER_'))
                    .map(item => ({
                        Item: item.name,
                        'Current Quantity': item.quantity,
                        'New Quantity': '',
                        ASIN: item.asin || '',
                        Category: item.category
                    }));

                const csv = Papa.unparse(inventoryData);
                const blob = new Blob([csv], { type: 'text/csv' });
                const url = window.URL.createObjectURL(blob);
                const link = document.createElement('a');
                link.href = url;
                link.setAttribute('download', 'bulk_inventory_template.csv');
                link.click();
            };

            const handleBulkInventoryCsvProcess = () => {
                if (!selectedBulkFile) return;

                Papa.parse(selectedBulkFile, {
                    header: true,
                    skipEmptyLines: true,
                    complete: async (results) => {
                        try {
                            setBulkUploadStatus('Processing...');
                            let updatedCount = 0;

                            for (const row of results.data) {
                                if (row.Item && row['New Quantity'] !== '' && !isNaN(parseInt(row['New Quantity']))) {
                                    const item = items.find(i => i.name.toLowerCase() === row.Item.toLowerCase());
                                    if (item) {
                                        const newQuantity = parseInt(row['New Quantity']);
                                        await fetch(`${API_BASE}/items/${item.id}`, {
                                            method: 'PATCH',
                                            headers: { 'Content-Type': 'application/json' },
                                            body: JSON.stringify({ quantity: newQuantity })
                                        });
                                        updatedCount++;
                                    }
                                }
                            }

                            fetchItems();
                            setBulkUploadStatus(`Successfully updated ${updatedCount} items`);
                            setSelectedBulkFile(null);
                        } catch (error) {
                            setBulkUploadStatus('Error processing bulk inventory');
                            console.error('Error processing bulk inventory:', error);
                        }
                    }
                });
            };

            // Bulk inventory scanning functions
            const toggleScanMode = () => {
                setIsScanMode(!isScanMode);
                setBulkBarcodeInput('');
                setRecentlyScannedItems(new Set());
                setScanCount(0);
                // Focus the barcode input when entering scan mode
                if (!isScanMode) {
                    setTimeout(() => {
                        document.getElementById('bulk-barcode-input')?.focus();
                    }, 100);
                }
            };

            const handleBulkBarcodeInput = (e) => {
                const value = e.target.value;
                setBulkBarcodeInput(value);
                
                // Auto-process when Enter is pressed, when a complete barcode is detected, or after a brief pause
                if (e.key === 'Enter' || value.endsWith('\n')) {
                    processBulkBarcodeInput(value.trim().replace(/\n/g, ''));
                } else if (value.length > 0) {
                    // Clear any existing timeout
                    if (window.bulkBarcodeTimeout) {
                        clearTimeout(window.bulkBarcodeTimeout);
                    }
                    
                    // Set a timeout to auto-process after 500ms of no input
                    window.bulkBarcodeTimeout = setTimeout(() => {
                        if (value.trim()) {
                            processBulkBarcodeInput(value.trim());
                        }
                    }, 500);
                }
            };

            const processBulkBarcodeInput = async (barcodeValue) => {
                if (!barcodeValue) return;
                
                // Find item by exact name match (case-insensitive)
                const foundItem = items.find(item => 
                    item.name.toLowerCase() === barcodeValue.toLowerCase()
                );
                
                if (foundItem) {
                    // Increment quantity by 1
                    const currentQuantity = foundItem.quantity;
                    const newQuantity = currentQuantity + 1;
                    
                    try {
                        await fetch(`${API_BASE}/items/${foundItem.id}`, {
                            method: 'PATCH',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ quantity: newQuantity })
                        });

                        // Update local state
                        setItems(items.map(item => 
                            item.id === foundItem.id ? { ...item, quantity: newQuantity } : item
                        ));

                        // Add to recently scanned items for visual feedback
                        const newRecentlyScanned = new Set(recentlyScannedItems);
                        newRecentlyScanned.add(foundItem.id);
                        setRecentlyScannedItems(newRecentlyScanned);

                        // Remove from recently scanned after 3 seconds
                        setTimeout(() => {
                            setRecentlyScannedItems(prev => {
                                const updated = new Set(prev);
                                updated.delete(foundItem.id);
                                return updated;
                            });
                        }, 3000);

                        // Increment scan count
                        setScanCount(prev => prev + 1);

                        // Clear input and show success feedback
                        setBulkBarcodeInput('');
                        
                        // Visual feedback - flash the input green
                        const inputElement = document.getElementById('bulk-barcode-input');
                        if (inputElement) {
                            inputElement.style.backgroundColor = '#dcfce7';
                            inputElement.style.borderColor = '#22c55e';
                            setTimeout(() => {
                                inputElement.style.backgroundColor = '';
                                inputElement.style.borderColor = '';
                            }, 500);
                        }

                        // Refocus input for continuous scanning
                        setTimeout(() => {
                            document.getElementById('bulk-barcode-input')?.focus();
                        }, 100);

                    } catch (error) {
                        console.error('Error updating item quantity:', error);
                        alert('Error updating item quantity');
                    }
                } else {
                    // Item not found - show error feedback
                    setBulkBarcodeInput('');
                    const inputElement = document.getElementById('bulk-barcode-input');
                    if (inputElement) {
                        inputElement.style.backgroundColor = '#fef2f2';
                        inputElement.style.borderColor = '#ef4444';
                        setTimeout(() => {
                            inputElement.style.backgroundColor = '';
                            inputElement.style.borderColor = '';
                        }, 1000);
                    }
                    
                    // Show not found message briefly
                    setBulkUploadStatus(`Item "${barcodeValue}" not found`);
                    setTimeout(() => {
                        setBulkUploadStatus('');
                    }, 3000);
                }
            };

            const clearScanningData = () => {
                setRecentlyScannedItems(new Set());
                setScanCount(0);
                setBulkUploadStatus('');
            };

            const clearScanData = () => {
                setRecentlyScannedItems(new Set());
                setScanCount(0);
                setBulkUploadStatus('');
            };

            const exportBulkInventoryTemplate = () => {
                const csvContent = "data:text/csv;charset=utf-8," + 
                    [['Item', 'Current Quantity', 'New Quantity', 'Current Price', 'New Price', 'ASIN', 'Category'].join(','),
                    ...items.map(item => [
                        item.name, 
                        item.quantity, 
                        '', // Empty new quantity for user to fill
                        item.price || '',
                        '', // Empty new price for user to fill
                        item.asin || '', 
                        item.category
                    ].join(','))
                    ].join('\n');
                const link = document.createElement("a");
                link.setAttribute("href", encodeURI(csvContent));
                link.setAttribute("download", "bulk_inventory_template.csv");
                link.click();
            };

            // Get unique categories
            const categories = ['All', ...new Set(items.map(item => item.category))];

            // Get unique item names for shipment processing
            const allItemNames = [...new Set([
                ...items.map(item => item.name),
                ...checkoutHistory.map(entry => entry.itemName)
            ])].filter(name => name && name.trim()).sort();

            // Filter and search items (exclude placeholder items from display)
            const filteredItems = items.filter(item => {
                // Skip placeholder items
                if (item.name && item.name.startsWith('_CATEGORY_PLACEHOLDER_')) {
                    return false;
                }
                
                // Category filter
                const matchesCategory = categoryFilter === 'All' || item.category === categoryFilter;
                
                // Search filter
                const matchesSearch = searchQuery === '' || 
                    item.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                    (item.asin && item.asin.toLowerCase().includes(searchQuery.toLowerCase())) ||
                    item.category.toLowerCase().includes(searchQuery.toLowerCase());
                
                return matchesCategory && matchesSearch;
            });

            // Filter items for bulk inventory
            console.log('🔄 Computing bulkInventoryItems from', items.length, 'total items');
            const bulkInventoryItems = items.filter(item => {
                // Skip placeholder items
                if (item.name && item.name.startsWith('_CATEGORY_PLACEHOLDER_')) {
                    return false;
                }
                
                // Category filter
                const matchesCategory = bulkInventoryCategoryFilter === 'All' || item.category === bulkInventoryCategoryFilter;
                
                // Search filter
                const matchesSearch = bulkInventorySearch === '' || 
                    item.name.toLowerCase().includes(bulkInventorySearch.toLowerCase()) ||
                    (item.asin && item.asin.toLowerCase().includes(bulkInventorySearch.toLowerCase())) ||
                    item.category.toLowerCase().includes(bulkInventorySearch.toLowerCase());
                
                return matchesCategory && matchesSearch;
            });

            // Shipment processing functions
            const toggleShipmentItemSelection = (itemName) => {
                if (selectedShipmentItems.includes(itemName)) {
                    setSelectedShipmentItems(selectedShipmentItems.filter(name => name !== itemName));
                    // Remove from quantities and prices if deselected
                    const newQuantities = { ...itemQuantities };
                    const newPrices = { ...itemPrices };
                    delete newQuantities[itemName];
                    delete newPrices[itemName];
                    setItemQuantities(newQuantities);
                    setItemPrices(newPrices);
                } else {
                    setSelectedShipmentItems([...selectedShipmentItems, itemName]);
                }
            };

            const handleUploadShipmentPdf = () => {
                if (selectedShipmentItems.length === 0) {
                    alert('Please select items first');
                    return;
                }
                setShowQuantityModal(true);
            };

            const updateShipmentItemQuantity = (itemName, quantity) => {
                setItemQuantities({
                    ...itemQuantities,
                    [itemName]: parseInt(quantity) || 0
                });
            };

            const updateItemPrice = (itemName, price) => {
                const parsedPrice = parseFloat(price) || 0;
                console.log(`Setting price for ${itemName}: ${parsedPrice}`);
                setItemPrices({
                    ...itemPrices,
                    [itemName]: parsedPrice
                });
            };

            const generateShipmentReport = async () => {
                console.log('🚀 Starting generateShipmentReport');
                if (!selectedPdfFile || selectedShipmentItems.length === 0) {
                    alert('Please select a PDF file and items');
                    return;
                }

                // Validate quantities and prices
                const missingData = selectedShipmentItems.filter(item => 
                    !itemQuantities[item] || !itemPrices[item] || itemQuantities[item] <= 0 || itemPrices[item] <= 0
                );
                if (missingData.length > 0) {
                    alert(`Please enter valid quantities and prices for: ${missingData.join(', ')}`);
                    return;
                }

                try {
                    const shipmentData = {};
                    const allAllocatedItems = []; // Track items to be removed from checkout history
                    const individualCheckouts = []; // Track individual checkouts for the report
                    
                    // Calculate total items for tax and fees distribution
                    const totalItems = selectedShipmentItems.reduce((sum, itemName) => sum + itemQuantities[itemName], 0);
                    const taxPerItem = totalItems > 0 ? shipmentTax / totalItems : 0;
                    const feesPerItem = totalItems > 0 ? shipmentFees / totalItems : 0;
                    
                    // Process each selected item
                    selectedShipmentItems.forEach(itemName => {
                        const quantity = itemQuantities[itemName];
                        const price = itemPrices[itemName];
                        
                        // Find matching checkout history entries (only unprocessed ones)
                        const matches = checkoutHistory.filter(entry => 
                            entry.itemName.toLowerCase() === itemName.toLowerCase()
                        );
                        
                        const costCodeGroups = {};
                        const itemsToAllocate = [];
                        
                        if (matches.length > 0) {
                            // Take only the quantity we have from oldest checkouts first
                            const availableMatches = matches.slice(0, quantity);
                            allAllocatedItems.push(...availableMatches);
                            itemsToAllocate.push(...availableMatches);
                            
                            // Group by job number or cost code for cost allocation
                            availableMatches.forEach(match => {
                                // Use job number if available, otherwise format department ID as cost code
                                const jobNumber = match.jobNum || match.jobNumber || '';
                                const costCode = jobNumber && jobNumber.trim() ? jobNumber : formatDepartmentId(match.departmentId);
                                if (!costCodeGroups[costCode]) {
                                    costCodeGroups[costCode] = {
                                        items: [],
                                        count: 0
                                    };
                                }
                                costCodeGroups[costCode].items.push(match);
                                costCodeGroups[costCode].count++;
                                
                                // Add to individual checkouts list
                                individualCheckouts.push({
                                    item: itemName,
                                    user: match.userName,
                                    costCode: costCode, // Use the chosen cost code (job number or department)
                                    matchId: match.id
                                });
                            });
                        }
                        
                        // Handle remaining quantity (items without checkout history)
                        const remainingQuantity = quantity - (matches.length > 0 ? Math.min(matches.length, quantity) : 0);
                        if (remainingQuantity > 0) {
                            // Allocate remaining items to IT Stock
                            const itStockCostCode = '1-20-000-5770';
                            if (!costCodeGroups[itStockCostCode]) {
                                costCodeGroups[itStockCostCode] = {
                                    items: [],
                                    count: 0
                                };
                            }
                            costCodeGroups[itStockCostCode].count += remainingQuantity;
                            
                            // Add to individual checkouts list
                            for (let i = 0; i < remainingQuantity; i++) {
                                individualCheckouts.push({
                                    item: itemName,
                                    user: 'IT Stock',
                                    costCode: itStockCostCode,
                                    matchId: null // No match ID for IT stock items
                                });
                            }
                        }
                        
                        shipmentData[itemName] = {
                            quantity,
                            price,
                            totalCost: quantity * price,
                            costCodeGroups,
                            allocatedItems: itemsToAllocate
                        };
                    });

                    // Generate cost allocation report and append to original PDF
                    const { PDFDocument, rgb } = PDFLib;
                    
                    // Helper function to wrap text - simplified approach without getTextWidth
                    const wrapText = (text, maxWidth, fontSize) => {
                        // Approximate character width estimation (font-size dependent)
                        const avgCharWidth = fontSize * 0.5; // Rough estimate for typical fonts
                        const maxCharsPerLine = Math.floor(maxWidth / avgCharWidth);
                        
                        const words = text.split(' ');
                        const lines = [];
                        let currentLine = '';
                        
                        for (const word of words) {
                            const testLine = currentLine ? `${currentLine} ${word}` : word;
                            
                            if (testLine.length <= maxCharsPerLine) {
                                currentLine = testLine;
                            } else {
                                if (currentLine) {
                                    lines.push(currentLine);
                                    currentLine = word;
                                } else {
                                    // Single word is too long, truncate it
                                    if (word.length > maxCharsPerLine) {
                                        const truncated = word.substring(0, maxCharsPerLine - 3) + '...';
                                        lines.push(truncated);
                                        currentLine = '';
                                    } else {
                                        currentLine = word;
                                    }
                                }
                            }
                        }
                        
                        if (currentLine) {
                            lines.push(currentLine);
                        }
                        
                        return lines;
                    };
                    
                    try {
                        // Read the original PDF file
                        const originalPdfBytes = await selectedPdfFile.arrayBuffer();
                        const originalPdf = await PDFDocument.load(originalPdfBytes);
                        
                        // Create a new PDF for the cost allocation report
                        const reportPdf = await PDFDocument.create();
                        let page = reportPdf.addPage([612, 792]); // Standard letter size
                        let yPos = 750;
                        
                        // Title and header
                        page.drawText('Shipment Cost Allocation Report', { x: 50, y: yPos, size: 16 });
                        yPos -= 20;
                        page.drawText(`Generated: ${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}`, { x: 50, y: yPos, size: 10 });
                        yPos -= 20;
                        
                        if (shipmentTax > 0 || shipmentFees > 0) {
                            page.drawText(`Tax ($${shipmentTax.toFixed(2)}) and Fees ($${shipmentFees.toFixed(2)}) distributed evenly per item`, { x: 50, y: yPos, size: 10 });
                            yPos -= 15;
                        }
                        yPos -= 15;
                        let grandTotal = 0;

                        // Cost Allocation Summary Table
                        page.drawText('Cost Allocation Summary', { x: 50, y: yPos, size: 14 });
                        yPos -= 25;

                        // Table headers - adjusted layout for wider item column
                        page.drawText('Item Description', { x: 50, y: yPos, size: 10 });
                        page.drawText('Qty', { x: 220, y: yPos, size: 10 });
                        page.drawText('Job/Cost Code', { x: 250, y: yPos, size: 10 });
                        page.drawText('Units', { x: 380, y: yPos, size: 10 });
                        page.drawText('Unit Price', { x: 420, y: yPos, size: 10 });
                        page.drawText('Total Cost', { x: 490, y: yPos, size: 10 });
                        
                        // Draw header line
                        page.drawLine({ start: { x: 50, y: yPos - 5 }, end: { x: 550, y: yPos - 5 }, thickness: 1 });
                        yPos -= 20;

                        Object.entries(shipmentData).forEach(([itemName, data]) => {
                            let itemSubTotal = 0;
                            
                            Object.entries(data.costCodeGroups).forEach(([costCode, group]) => {
                                const baseCostPerUnit = data.price;
                                const totalCostPerUnit = baseCostPerUnit + taxPerItem + feesPerItem;
                                const costForGroup = group.count * totalCostPerUnit;
                                itemSubTotal += costForGroup;
                                
                                // Wrap item name text across multiple lines if needed
                                const itemNameLines = wrapText(itemName, 160, 9); // 160 units wide for item column
                                const lineHeight = 12;
                                const rowHeight = Math.max(lineHeight, itemNameLines.length * lineHeight);
                                
                                // Check if we need a new page (account for multi-line items)
                                if (yPos - rowHeight < 50) {
                                    page = reportPdf.addPage([612, 792]);
                                    yPos = 750;
                                }
                                
                                // Draw item name (potentially multi-line)
                                itemNameLines.forEach((line, index) => {
                                    page.drawText(line, { x: 50, y: yPos - (index * lineHeight), size: 9 });
                                });
                                
                                // Draw other columns aligned to the first line of the item name
                                page.drawText(group.count.toString(), { x: 220, y: yPos, size: 9 });
                                page.drawText(costCode, { x: 250, y: yPos, size: 9 });
                                page.drawText(group.count.toString(), { x: 380, y: yPos, size: 9 });
                                page.drawText(`$${baseCostPerUnit.toFixed(2)}`, { x: 420, y: yPos, size: 9 });
                                page.drawText(`$${costForGroup.toFixed(2)}`, { x: 490, y: yPos, size: 9 });
                                
                                yPos -= rowHeight + 3; // Add small gap between rows
                            });
                            
                            grandTotal += itemSubTotal;
                        });

                        // Grand total and breakdown
                        page.drawLine({ start: { x: 350, y: yPos + 5 }, end: { x: 550, y: yPos + 5 }, thickness: 1 });
                        yPos -= 10;
                        
                        // Calculate totals
                        const subtotalWithoutTaxFees = grandTotal - (shipmentTax + shipmentFees);
                        
                        page.drawText(`Subtotal (Items): $${subtotalWithoutTaxFees.toFixed(2)}`, { x: 350, y: yPos, size: 10 });
                        yPos -= 15;
                        if (shipmentTax > 0) {
                            page.drawText(`Tax: $${shipmentTax.toFixed(2)}`, { x: 350, y: yPos, size: 10 });
                            yPos -= 15;
                        }
                        if (shipmentFees > 0) {
                            page.drawText(`Fees: $${shipmentFees.toFixed(2)}`, { x: 350, y: yPos, size: 10 });
                            yPos -= 15;
                        }
                        page.drawLine({ start: { x: 350, y: yPos + 5 }, end: { x: 550, y: yPos + 5 }, thickness: 1 });
                        yPos -= 10;
                        page.drawText(`Grand Total: $${grandTotal.toFixed(2)}`, { x: 350, y: yPos, size: 12 });
                        yPos -= 30;

                        // Individual Checkouts Table
                        if (yPos < 150) {
                            page = reportPdf.addPage([612, 792]);
                            yPos = 750;
                        }
                        
                        page.drawText('Individual Checkout Details', { x: 50, y: yPos, size: 14 });
                        yPos -= 25;

                        // Table headers - adjusted layout for better spacing
                        page.drawText('Item Description', { x: 50, y: yPos, size: 10 });
                        page.drawText('User', { x: 250, y: yPos, size: 10 });
                        page.drawText('Cost Code', { x: 400, y: yPos, size: 10 });
                        
                        page.drawLine({ start: { x: 50, y: yPos - 5 }, end: { x: 550, y: yPos - 5 }, thickness: 1 });
                        yPos -= 20;

                        individualCheckouts.forEach(checkout => {
                            // Wrap text for item and user names
                            const itemLines = wrapText(checkout.item, 190, 9); // 190 units for item column
                            const userLines = wrapText(checkout.user, 140, 9);  // 140 units for user column
                            const lineHeight = 12;
                            const rowHeight = Math.max(itemLines.length * lineHeight, userLines.length * lineHeight, lineHeight);
                            
                            // Check if we need a new page
                            if (yPos - rowHeight < 50) {
                                page = reportPdf.addPage([612, 792]);
                                yPos = 750;
                            }
                            
                            // Draw item name (potentially multi-line)
                            itemLines.forEach((line, index) => {
                                page.drawText(line, { x: 50, y: yPos - (index * lineHeight), size: 9 });
                            });
                            
                            // Draw user name (potentially multi-line)
                            userLines.forEach((line, index) => {
                                page.drawText(line, { x: 250, y: yPos - (index * lineHeight), size: 9 });
                            });
                            
                            // Draw cost code aligned to first line
                            page.drawText(checkout.costCode, { x: 400, y: yPos, size: 9 });
                            
                            yPos -= rowHeight + 3; // Add small gap between rows
                        });
                        
                        // Copy pages from report to original PDF
                        const reportPages = await originalPdf.copyPages(reportPdf, reportPdf.getPageIndices());
                        reportPages.forEach(page => originalPdf.addPage(page));
                        
                        // Save the combined PDF
                        const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
                        const combinedPdfBytes = await originalPdf.save();
                        const blob = new Blob([combinedPdfBytes], { type: 'application/pdf' });
                        const url = URL.createObjectURL(blob);
                        
                        const link = document.createElement('a');
                        link.href = url;
                        link.download = `shipment-with-allocation-${timestamp}.pdf`;
                        link.click();
                        
                        URL.revokeObjectURL(url);
                        
                    } catch (pdfError) {
                        console.error('Error processing PDF:', pdfError);
                        console.error('Error stack:', pdfError.stack);
                        alert(`Error appending cost allocation to PDF: ${pdfError.message}. Generating separate report instead.`);
                        
                        // Fallback to separate PDF generation using jsPDF
                        const { jsPDF } = window.jspdf;
                        const doc = new jsPDF();
                        
                        // Title and header
                        doc.setFontSize(16);
                        doc.text('Shipment Cost Allocation Report', 20, 20);
                        doc.setFontSize(10);
                        doc.text(`Generated: ${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}`, 20, 30);
                        
                        let yPos = 50;
                        if (shipmentTax > 0 || shipmentFees > 0) {
                            doc.text(`Tax ($${shipmentTax.toFixed(2)}) and Fees ($${shipmentFees.toFixed(2)}) distributed evenly per item`, 20, yPos);
                            yPos += 10;
                        }
                        
                        // Simple fallback table without text wrapping
                        doc.setFontSize(12);
                        doc.text('Cost Allocation Summary', 20, yPos);
                        yPos += 15;
                        
                        doc.setFontSize(9);
                        doc.text('Item', 20, yPos);
                        doc.text('Qty', 80, yPos);
                        doc.text('Code', 110, yPos);
                        doc.text('Unit $', 140, yPos);
                        doc.text('Total $', 170, yPos);
                        
                        doc.line(20, yPos + 2, 200, yPos + 2);
                        yPos += 10;
                        
                        let grandTotal = 0;
                        Object.entries(shipmentData).forEach(([itemName, data]) => {
                            Object.entries(data.costCodeGroups).forEach(([costCode, group]) => {
                                if (yPos > 270) {
                                    doc.addPage();
                                    yPos = 20;
                                }
                                
                                const baseCostPerUnit = data.price;
                                const totalCostPerUnit = baseCostPerUnit + taxPerItem + feesPerItem;
                                const costForGroup = group.count * totalCostPerUnit;
                                grandTotal += costForGroup;
                                
                                // Truncate long names for fallback
                                const shortItem = itemName.length > 15 ? itemName.substring(0, 15) + '...' : itemName;
                                const shortCode = costCode.length > 10 ? costCode.substring(0, 10) + '...' : costCode;
                                
                                doc.text(shortItem, 20, yPos);
                                doc.text(group.count.toString(), 80, yPos);
                                doc.text(shortCode, 110, yPos);
                                doc.text(`$${baseCostPerUnit.toFixed(2)}`, 140, yPos);
                                doc.text(`$${costForGroup.toFixed(2)}`, 170, yPos);
                                yPos += 8;
                            });
                        });
                        
                        // Grand total
                        yPos += 5;
                        doc.line(140, yPos, 200, yPos);
                        yPos += 8;
                        doc.setFontSize(10);
                        doc.text(`Grand Total: $${grandTotal.toFixed(2)}`, 140, yPos);
                        
                        const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
                        doc.save(`shipment-allocation-${timestamp}.pdf`);
                    }
                    
                    // Remove allocated items from checkout history
                    for (const item of allAllocatedItems) {
                        await fetch(`${API_BASE}/checkoutHistory/${item.id}`, {
                            method: 'DELETE'
                        });
                    }
                    
                    // Update item prices in database
                    console.log('Starting price updates...');
                    console.log('selectedShipmentItems:', selectedShipmentItems);
                    console.log('itemPrices:', itemPrices);
                    
                    let pricesUpdated = 0;
                    for (const itemName of selectedShipmentItems) {
                        const newPrice = itemPrices[itemName];
                        console.log(`Processing ${itemName}: price = ${newPrice}`);
                        
                        if (newPrice && newPrice > 0) {
                            // Find the item in the current inventory
                            const item = items.find(i => i.name.toLowerCase() === itemName.toLowerCase());
                            console.log(`Found item for ${itemName}:`, item);
                            
                            if (item) {
                                try {
                                    const response = await fetch(`${API_BASE}/items/${item.id}`, {
                                        method: 'PATCH',
                                        headers: { 'Content-Type': 'application/json' },
                                        body: JSON.stringify({ price: newPrice })
                                    });
                                    
                                    if (response.ok) {
                                        console.log(`✅ Updated price for ${itemName}: $${newPrice.toFixed(2)}`);
                                        pricesUpdated++;
                                        
                                        // Verify the update by fetching the item again
                                        const verifyResponse = await fetch(`${API_BASE}/items/${item.id}`);
                                        if (verifyResponse.ok) {
                                            const updatedItem = await verifyResponse.json();
                                            console.log(`🔍 Verified ${itemName} price in DB:`, updatedItem.price);
                                        }
                                    } else {
                                        console.error(`❌ API error updating ${itemName}:`, response.status, response.statusText);
                                        const errorText = await response.text();
                                        console.error(`Error details:`, errorText);
                                    }
                                } catch (priceError) {
                                    console.error(`❌ Failed to update price for ${itemName}:`, priceError);
                                }
                            } else {
                                console.warn(`⚠️ Item not found in inventory: ${itemName}`);
                            }
                        } else {
                            console.log(`⏭️ Skipping ${itemName}: no valid price (${newPrice})`);
                        }
                    }
                    
                    console.log(`Price update complete. Updated ${pricesUpdated} items.`);
                    
                    // Add a small delay to ensure database writes are complete
                    console.log('⏳ Waiting for database to settle...');
                    await new Promise(resolve => setTimeout(resolve, 500));
                    
                    // Refresh checkout history and items list
                    console.log('🔄 Refreshing checkout history...');
                    await fetchCheckoutHistory();
                    console.log('🔄 Refreshing items list...');
                    await fetchItems(); // Refresh items to show updated prices
                    console.log('🎉 All data refreshed!');
                    
                    // Reset states
                    setSelectedShipmentItems([]);
                    setItemQuantities({});
                    setItemPrices({});
                    setShowQuantityModal(false);
                    setSelectedPdfFile(null);
                    setShipmentTax(0);
                    setShipmentFees(0);
                    
                    alert(`Shipment report generated successfully! ${allAllocatedItems.length} checkout entries processed and removed. ${pricesUpdated} item prices updated.`);
                    
                } catch (error) {
                    console.error('Error generating shipment report:', error);
                    alert('Error generating shipment report');
                }
            };

            // Enhanced PDF Processing Functions - Beta Features
            const enhancedPdfProcessing = {
                // OCR-like text extraction enhancement
                enhanceTextExtraction: async (pdfFile) => {
                    console.log('🔍 Enhanced PDF text extraction started...');
                    try {
                        // Use PDF.js for better text extraction
                        const arrayBuffer = await pdfFile.arrayBuffer();
                        const uint8Array = new Uint8Array(arrayBuffer);
                        
                        const loadingTask = pdfjsLib.getDocument(uint8Array);
                        const pdfDoc = await loadingTask.promise;
                        
                        let fullText = '';
                        const textPages = [];
                        
                        // Process all pages
                        for (let pageNum = 1; pageNum <= pdfDoc.numPages; pageNum++) {
                            console.log(`📄 Processing page ${pageNum}/${pdfDoc.numPages}...`);
                            const page = await pdfDoc.getPage(pageNum);
                            const textContent = await page.getTextContent();
                            
                            const pageText = textContent.items.map(item => item.str).join(' ');
                            textPages.push({
                                pageNumber: pageNum,
                                text: pageText,
                                items: textContent.items
                            });
                            fullText += pageText + '\n\n';
                        }
                        
                        return {
                            fullText,
                            pages: textPages,
                            pageCount: pdfDoc.numPages
                        };
                    } catch (error) {
                        console.error('Enhanced text extraction failed:', error);
                        return null;
                    }
                },

                // Vendor recognition and categorization
                recognizeVendor: (text) => {
                    const vendors = {
                        'Amazon': {
                            patterns: ['amazon\\.com', 'amzn\\.com', 'amazon business', 'shipped by amazon'],
                            taxHandling: 'separate_line',
                            itemFormat: 'line_item'
                        },
                        'Best Buy': {
                            patterns: ['bestbuy\\.com', 'best buy', 'bby\\.com'],
                            taxHandling: 'separate_line',
                            itemFormat: 'line_item'
                        },
                        'Office Depot': {
                            patterns: ['officedepot\\.com', 'office depot'],
                            taxHandling: 'separate_line',
                            itemFormat: 'line_item'
                        },
                        'CDW': {
                            patterns: ['cdw\\.com', 'cdw corporation'],
                            taxHandling: 'separate_line',
                            itemFormat: 'line_item'
                        },
                        'Staples': {
                            patterns: ['staples\\.com', 'staples inc'],
                            taxHandling: 'separate_line',
                            itemFormat: 'line_item'
                        },
                        'Generic': {
                            patterns: [],
                            taxHandling: 'separate_line',
                            itemFormat: 'line_item'
                        }
                    };

                    const lowerText = text.toLowerCase();
                    for (const [vendorName, config] of Object.entries(vendors)) {
                        if (vendorName === 'Generic') continue;
                        
                        for (const pattern of config.patterns) {
                            const regex = new RegExp(pattern, 'i');
                            if (regex.test(lowerText)) {
                                console.log(`🏪 Vendor identified: ${vendorName}`);
                                return { name: vendorName, config };
                            }
                        }
                    }
                    
                    console.log('🏪 Using generic vendor processing');
                    return { name: 'Generic', config: vendors.Generic };
                },

                // Enhanced line item detection
                detectLineItems: (text, vendor) => {
                    console.log('🔍 Detecting line items with enhanced processing...');
                    const lines = text.split('\n').filter(line => line.trim().length > 0);
                    const detectedItems = [];
                    
                    // Common price patterns
                    const pricePatterns = [
                        /\$\s*(\d+(?:,\d{3})*\.?\d{0,2})/g,  // $1,234.56
                        /(\d+(?:,\d{3})*\.\d{2})\s*USD/gi,   // 1234.56 USD
                        /USD\s*(\d+(?:,\d{3})*\.\d{2})/gi    // USD 1234.56
                    ];
                    
                    // Common quantity patterns  
                    const quantityPatterns = [
                        /qty[:\s]*(\d+)/gi,
                        /quantity[:\s]*(\d+)/gi,
                        /x(\d+)/gi,
                        /(\d+)\s*x\s*/gi
                    ];

                    for (let i = 0; i < lines.length; i++) {
                        const line = lines[i].trim();
                        
                        // Skip empty lines, headers, totals
                        if (!line || 
                            /^(subtotal|total|tax|shipping|order|date|invoice)/i.test(line) ||
                            line.length < 10) {
                            continue;
                        }

                        // Look for lines with both text and price
                        let foundPrice = null;
                        let foundQuantity = 1;
                        
                        for (const pattern of pricePatterns) {
                            const priceMatch = line.match(pattern);
                            if (priceMatch) {
                                const priceStr = priceMatch[0].replace(/[^\d.]/g, '');
                                const price = parseFloat(priceStr);
                                if (price > 0 && price < 10000) { // Reasonable price range
                                    foundPrice = price;
                                    break;
                                }
                            }
                        }

                        for (const pattern of quantityPatterns) {
                            const qtyMatch = line.match(pattern);
                            if (qtyMatch) {
                                const qty = parseInt(qtyMatch[1]);
                                if (qty > 0 && qty < 100) { // Reasonable quantity range
                                    foundQuantity = qty;
                                    break;
                                }
                            }
                        }

                        if (foundPrice) {
                            // Extract item name (remove price and quantity info)
                            let itemName = line
                                .replace(/\$\s*[\d,]+\.?\d*/g, '') // Remove prices
                                .replace(/qty[:\s]*\d+/gi, '')     // Remove qty
                                .replace(/quantity[:\s]*\d+/gi, '') // Remove quantity
                                .replace(/x\d+/gi, '')             // Remove x2, x3, etc
                                .replace(/\d+\s*x\s*/gi, '')       // Remove 2 x, 3 x, etc
                                .trim();

                            if (itemName.length > 3) {
                                detectedItems.push({
                                    name: itemName,
                                    price: foundPrice,
                                    quantity: foundQuantity,
                                    source: 'line_detection',
                                    confidence: 0.8
                                });
                                console.log(`📦 Detected item: ${itemName} ($${foundPrice}) x${foundQuantity}`);
                            }
                        }
                    }

                    return detectedItems;
                },

                // Enhanced tax and fee detection
                detectTaxesAndFees: (text) => {
                    console.log('💰 Detecting taxes and fees...');
                    let totalTax = 0;
                    let totalFees = 0;
                    
                    const lines = text.split('\n');
                    
                    for (const line of lines) {
                        const lowerLine = line.toLowerCase();
                        
                        // Tax detection patterns
                        if (/tax|vat|gst|hst/.test(lowerLine)) {
                            const taxMatch = line.match(/\$?\s*(\d+(?:\.\d{2})?)/);
                            if (taxMatch) {
                                const taxAmount = parseFloat(taxMatch[1]);
                                if (taxAmount > 0 && taxAmount < 1000) {
                                    totalTax += taxAmount;
                                    console.log(`💸 Found tax: $${taxAmount}`);
                                }
                            }
                        }
                        
                        // Fee detection patterns
                        if (/shipping|delivery|handling|fee|surcharge/.test(lowerLine)) {
                            const feeMatch = line.match(/\$?\s*(\d+(?:\.\d{2})?)/);
                            if (feeMatch) {
                                const feeAmount = parseFloat(feeMatch[1]);
                                if (feeAmount > 0 && feeAmount < 500) {
                                    totalFees += feeAmount;
                                    console.log(`📦 Found fee: $${feeAmount}`);
                                }
                            }
                        }
                    }
                    
                    return { tax: totalTax, fees: totalFees };
                },

                // Smart item matching with fuzzy search
                smartItemMatch: (detectedName, inventoryItems) => {
                    const cleanName = (name) => name.toLowerCase()
                        .replace(/[^a-z0-9\s]/g, '')
                        .replace(/\s+/g, ' ')
                        .trim();
                    
                    const cleanDetected = cleanName(detectedName);
                    const matches = [];
                    
                    for (const item of inventoryItems) {
                        const cleanInventory = cleanName(item.name);
                        
                        // Exact match
                        if (cleanInventory === cleanDetected) {
                            matches.push({ item, score: 1.0, type: 'exact' });
                            continue;
                        }
                        
                        // Contains match
                        if (cleanInventory.includes(cleanDetected) || cleanDetected.includes(cleanInventory)) {
                            const score = Math.min(cleanDetected.length, cleanInventory.length) / 
                                         Math.max(cleanDetected.length, cleanInventory.length);
                            matches.push({ item, score: score * 0.9, type: 'contains' });
                            continue;
                        }
                        
                        // Word overlap
                        const detectedWords = cleanDetected.split(' ').filter(w => w.length > 2);
                        const inventoryWords = cleanInventory.split(' ').filter(w => w.length > 2);
                        
                        if (detectedWords.length > 0 && inventoryWords.length > 0) {
                            const commonWords = detectedWords.filter(word => 
                                inventoryWords.some(invWord => 
                                    invWord.includes(word) || word.includes(invWord)
                                )
                            );
                            
                            if (commonWords.length > 0) {
                                const score = commonWords.length / Math.max(detectedWords.length, inventoryWords.length);
                                if (score > 0.3) {
                                    matches.push({ item, score: score * 0.7, type: 'partial' });
                                }
                            }
                        }
                    }
                    
                    // Sort by score and return best match
                    matches.sort((a, b) => b.score - a.score);
                    return matches.length > 0 ? matches[0] : null;
                }
            };

            // Enhanced generateShipmentReport with OCR features
            const generateEnhancedShipmentReport = async () => {
                console.log('🚀 Starting enhanced shipment report generation...');
                
                if (!selectedPdfFile) {
                    alert('Please select a PDF file');
                    return;
                }

                try {
                    // Enhanced PDF text extraction
                    const extractedData = await enhancedPdfProcessing.enhanceTextExtraction(selectedPdfFile);
                    
                    if (!extractedData) {
                        alert('Failed to extract text from PDF. Please try again.');
                        return;
                    }

                    console.log(`📊 Extracted text from ${extractedData.pageCount} pages`);

                    // Vendor recognition
                    const vendor = enhancedPdfProcessing.recognizeVendor(extractedData.fullText);
                    
                    // Detect line items automatically
                    const detectedItems = enhancedPdfProcessing.detectLineItems(extractedData.fullText, vendor);
                    
                    // Detect taxes and fees
                    const taxesAndFees = enhancedPdfProcessing.detectTaxesAndFees(extractedData.fullText);
                    
                    if (taxesAndFees.tax > 0) {
                        setShipmentTax(taxesAndFees.tax);
                        console.log(`💸 Auto-detected tax: $${taxesAndFees.tax}`);
                    }
                    
                    if (taxesAndFees.fees > 0) {
                        setShipmentFees(taxesAndFees.fees);
                        console.log(`📦 Auto-detected fees: $${taxesAndFees.fees}`);
                    }

                    // Smart matching with inventory
                    const matchedItems = [];
                    const unmatchedItems = [];
                    
                    for (const detectedItem of detectedItems) {
                        const match = enhancedPdfProcessing.smartItemMatch(detectedItem.name, items);
                        
                        if (match && match.score > 0.5) {
                            matchedItems.push({
                                detected: detectedItem,
                                inventory: match.item,
                                score: match.score,
                                type: match.type
                            });
                            console.log(`✅ Matched: "${detectedItem.name}" -> "${match.item.name}" (${(match.score * 100).toFixed(1)}%)`);
                        } else {
                            unmatchedItems.push(detectedItem);
                            console.log(`❌ No match for: "${detectedItem.name}"`);
                        }
                    }

                    // Pre-populate the shipment processing form
                    const newSelectedItems = matchedItems.map(m => m.inventory.name);
                    const newQuantities = {};
                    const newPrices = {};
                    
                    for (const match of matchedItems) {
                        const itemName = match.inventory.name;
                        newQuantities[itemName] = match.detected.quantity;
                        newPrices[itemName] = match.detected.price;
                    }
                    
                    setSelectedShipmentItems(newSelectedItems);
                    setItemQuantities(newQuantities);
                    setItemPrices(newPrices);

                    // Show results to user
                    const resultMessage = `
🔍 Enhanced PDF Processing Results:

📄 Processed: ${extractedData.pageCount} pages
🏪 Vendor: ${vendor.name}
📦 Items detected: ${detectedItems.length}
✅ Items matched: ${matchedItems.length}
❌ Items unmatched: ${unmatchedItems.length}
💸 Tax detected: $${taxesAndFees.tax.toFixed(2)}
📦 Fees detected: $${taxesAndFees.fees.toFixed(2)}

${matchedItems.length > 0 ? 'Matched items have been pre-selected below. Review and adjust as needed.' : ''}
${unmatchedItems.length > 0 ? '\nUnmatched items:\n' + unmatchedItems.map(item => `• ${item.name} ($${item.price})`).join('\n') : ''}
                    `;

                    alert(resultMessage);
                    
                } catch (error) {
                    console.error('Error in enhanced PDF processing:', error);
                    alert('Error processing PDF with enhanced features. Please try manual processing.');
                }
            };

            // Category management functions
            const addCategory = async () => {
                const categoryName = newCategory.trim();
                if (categoryName && !categories.includes(categoryName)) {
                    // Create a placeholder item with the new category to make it available
                    try {
                        const response = await fetch(`${API_BASE}/items`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                name: `_CATEGORY_PLACEHOLDER_${categoryName}`,
                                quantity: 0,
                                category: categoryName,
                                asin: '',
                                minThreshold: 0
                            })
                        });

                        if (response.ok) {
                            await fetchItems(); // Refresh to get new category
                            setNewCategory('');
                            setShowCategoryManager(false);
                            alert(`Category "${categoryName}" added successfully! You can now assign it to items.`);
                        } else {
                            alert('Error adding category');
                        }
                    } catch (error) {
                        console.error('Error adding category:', error);
                        alert('Error adding category');
                    }
                }
            };

            // Item editing functions
            const startEditingItem = (item) => {
                setEditingItem({...item});
            };

            const cancelEditingItem = () => {
                setEditingItem(null);
            };

            const saveItemChanges = async () => {
                if (!editingItem) return;

                try {
                    const response = await fetch(`${API_BASE}/items/${editingItem.id}`, {
                        method: 'PATCH',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            name: editingItem.name,
                            category: editingItem.category,
                            asin: editingItem.asin,
                            quantity: editingItem.quantity,
                            minThreshold: editingItem.minThreshold
                        })
                    });

                    if (response.ok) {
                        fetchItems();
                        setEditingItem(null);
                        alert('Item updated successfully!');
                    } else {
                        alert('Error updating item');
                    }
                } catch (error) {
                    console.error('Error updating item:', error);
                    alert('Error updating item');
                }
            };

            const deleteItem = async (itemId) => {
                if (!confirm('Are you sure you want to delete this item?')) return;

                try {
                    const response = await fetch(`${API_BASE}/items/${itemId}`, {
                        method: 'DELETE'
                    });

                    if (response.ok) {
                        fetchItems();
                        alert('Item deleted successfully!');
                    } else {
                        alert('Error deleting item');
                    }
                } catch (error) {
                    console.error('Error deleting item:', error);
                    alert('Error deleting item');
                }
            };

            // Bulk update functions
            const toggleItemSelection = (itemId) => {
                if (selectedItems.includes(itemId)) {
                    setSelectedItems(selectedItems.filter(id => id !== itemId));
                } else {
                    setSelectedItems([...selectedItems, itemId]);
                }
            };

            const selectAllItems = () => {
                if (selectedItems.length === filteredItems.length) {
                    setSelectedItems([]);
                } else {
                    setSelectedItems(filteredItems.map(item => item.id));
                }
            };

            const bulkUpdateCategories = async () => {
                if (selectedItems.length === 0 || !bulkUpdateCategory) {
                    alert('Please select items and choose a category');
                    return;
                }

                if (!confirm(`Update ${selectedItems.length} items to category "${bulkUpdateCategory}"?`)) {
                    return;
                }

                try {
                    const updatePromises = selectedItems.map(itemId => 
                        fetch(`${API_BASE}/items/${itemId}`, {
                            method: 'PATCH',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ category: bulkUpdateCategory })
                        })
                    );

                    await Promise.all(updatePromises);
                    
                    fetchItems();
                    setSelectedItems([]);
                    setBulkUpdateCategory('');
                    alert(`Successfully updated ${selectedItems.length} items!`);
                } catch (error) {
                    console.error('Error bulk updating items:', error);
                    alert('Error updating items');
                }
            };

            const cancelBulkUpdate = () => {
                setSelectedItems([]);
                setBulkUpdateCategory('');
                setShowBulkUpdate(false);
            };

            // Export functions
            const exportInventory = () => {
                const csvContent = "data:text/csv;charset=utf-8," + 
                    [['Item', 'Stock', 'Category', 'ASIN'].join(','),
                    ...items.map(item => [item.name, item.quantity, item.category || '', item.asin || ''].join(','))
                    ].join('\n');
                const link = document.createElement("a");
                link.setAttribute("href", encodeURI(csvContent));
                link.setAttribute("download", "inventory_export.csv");
                link.click();
            };

            const exportUsers = () => {
                const csvContent = "data:text/csv;charset=utf-8," + 
                    [['FirstName', 'LastName', 'CostCode'].join(','),
                    ...users.map(user => [user.firstName, user.lastName, user.cost_code || user.costCode].join(','))
                    ].join('\n');
                const link = document.createElement("a");
                link.setAttribute("href", encodeURI(csvContent));
                link.setAttribute("download", "users_export.csv");
                link.click();
            };

            // Manual item creation functions
            const handleAddItem = async () => {
                if (!newItemName.trim()) {
                    setAddItemStatus('Item name is required');
                    return;
                }

                try {
                    setAddItemStatus('Creating item...');
                    
                    const newItem = {
                        name: newItemName.trim(),
                        price: parseFloat(newItemPrice) || 0,
                        quantity: parseInt(newItemQuantity) || 0,
                        asin: newItemASIN.trim(),
                        category: newItemCategory.trim() || 'Uncategorized',
                        minThreshold: 5 // Default threshold
                    };

                    const response = await fetch(`${API_BASE}/items`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(newItem)
                    });

                    if (response.ok) {
                        // Reset form
                        setNewItemName('');
                        setNewItemPrice('');
                        setNewItemQuantity('');
                        setNewItemASIN('');
                        setNewItemCategory('');
                        setShowAddItemForm(false);
                        
                        // Refresh items list
                        fetchItems();
                        
                        setAddItemStatus('Item created successfully!');
                        setTimeout(() => setAddItemStatus(''), 3000);
                    } else {
                        setAddItemStatus('Error creating item');
                    }
                } catch (error) {
                    console.error('Error creating item:', error);
                    setAddItemStatus('Error creating item');
                }
            };

            const cancelAddItem = () => {
                setNewItemName('');
                setNewItemPrice('');
                setNewItemQuantity('');
                setNewItemASIN('');
                setNewItemCategory('');
                setShowAddItemForm(false);
                setAddItemStatus('');
            };

            // Filter users based on search term
            const filteredUsers = users.filter(user => {
                const fullName = `${user.firstName} ${user.lastName}`.toLowerCase();
                const costCode = (user.cost_code || user.costCode || '').toLowerCase();
                const search = userSearchTerm.toLowerCase();
                return fullName.includes(search) || costCode.includes(search);
            });

            // Navigation
            const tabs = [
                { id: 'shop', name: 'Shop', icon: '🛍️' },
                { id: 'cart', name: 'Cart', icon: '🛒' },
                { id: 'history', name: 'Checkout History', icon: '📊' },
                { id: 'users', name: 'Users', icon: '👥' },
                { id: 'inventory-management', name: 'Inventory Management', icon: '📦' },
                { id: 'notifications', name: 'Notifications', icon: '🔔' },
                { id: 'process', name: 'Process Shipment', icon: '📦' }
            ];

            return (
                <div className="min-h-screen bg-gray-100">
                    {/* Header */}
                    <header className="bg-white shadow-sm">
                        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                            <div className="flex justify-between items-center py-6">
                                <div className="flex items-center space-x-3">
                                    <h1 className="text-3xl font-bold text-gray-900">IT Inventory Management</h1>
                                    <span className="px-3 py-1 text-sm font-medium bg-gradient-to-r from-green-500 to-blue-500 text-white rounded-full">
                                        🏭 PRODUCTION
                                    </span>
                                </div>
                                <div className="text-sm text-gray-500">
                                    Cart: {cart.reduce((sum, item) => sum + item.quantity, 0)} items
                                </div>
                            </div>
                        </div>
                    </header>

                    {/* Navigation */}
                    <nav className="bg-white border-b border-gray-200">
                        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                            <div className="flex space-x-8">
                                {tabs.map(tab => (
                                    <button
                                        key={tab.id}
                                        onClick={() => setActiveTab(tab.id)}
                                        className={`py-2 px-1 border-b-2 font-medium text-sm ${activeTab === tab.id ? 'border-blue-500 text-blue-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'}`}
                                    >
                                        {tab.icon} {tab.name}
                                        {tab.id === 'cart' && cart.length > 0 && (
                                            <span className="ml-2 bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded-full">
                                                {cart.reduce((sum, item) => sum + item.quantity, 0)}
                                            </span>
                                        )}
                                        {tab.id === 'notifications' && notifications.length > 0 && (
                                            <span className="ml-2 bg-red-100 text-red-800 text-xs font-medium px-2.5 py-0.5 rounded-full">
                                                {notifications.length}
                                            </span>
                                        )}
                                    </button>
                                ))}
                            </div>
                        </div>
                    </nav>

                    {/* Main Content */}
                    <main className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
                        {/* Shop Tab */}
                        {activeTab === 'shop' && (
                            <div className="px-4 py-6 sm:px-0">
                                <div className="mb-6 space-y-4">
                                    {/* Barcode Scanning Section */}
                                    <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                                        <div className="flex items-center mb-3">
                                            <span className="text-2xl mr-2">📷</span>
                                            <h3 className="text-lg font-medium text-blue-900">Barcode Scanner</h3>
                                        </div>
                                        <div className="flex gap-2">
                                            <div className="flex-1">
                                                <input
                                                    id="barcode-input"
                                                    type="text"
                                                    value={barcodeInput}
                                                    onChange={(e) => setBarcodeInput(e.target.value)}
                                                    onKeyDown={handleBarcodeInput}
                                                    placeholder="Scan barcode or type item name..."
                                                    className="block w-full px-3 py-2 border border-blue-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white"
                                                    autoFocus
                                                />
                                            </div>
                                            <button
                                                onClick={handleManualBarcodeSubmit}
                                                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 whitespace-nowrap"
                                            >
                                                Add to Cart
                                            </button>
                                        </div>
                                        <p className="text-sm text-blue-700 mt-2">
                                            💡 Tip: Position cursor in the input field and scan the barcode, or type the exact item name and press Enter
                                        </p>
                                    </div>

                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-2">
                                            Search Items:
                                        </label>
                                        <input
                                            type="text"
                                            value={searchQuery}
                                            onChange={(e) => setSearchQuery(e.target.value)}
                                            placeholder="Search by name, ASIN, or category..."
                                            className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                        />
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-2">
                                            Filter by Category:
                                        </label>
                                        <select
                                            value={categoryFilter}
                                            onChange={(e) => setCategoryFilter(e.target.value)}
                                            className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                        >
                                            {categories.map(category => (
                                                <option key={category} value={category}>{category}</option>
                                            ))}
                                        </select>
                                    </div>
                                    <div className="text-sm text-gray-600">
                                        Showing {filteredItems.length} of {items.length} items
                                    </div>
                                </div>

                                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                                    {sortData(filteredItems, itemSortConfig).map(item => (
                                        <div key={item.id} className="bg-white overflow-hidden shadow rounded-lg">
                                            <div className="p-6">
                                                <h3 className="text-lg font-medium text-gray-900 mb-2">{item.name}</h3>
                                                <p className="text-sm text-gray-500 mb-2">Category: {item.category}</p>
                                                <p className={`text-sm mb-2 ${item.quantity === 0 ? 'text-red-600 font-medium' : 'text-gray-500'}`}>
                                                    Stock: {item.quantity === 0 ? 'No Stock' : item.quantity}
                                                </p>
                                                {item.price && item.price > 0 && (
                                                    <p className="text-lg font-semibold text-green-600 mb-2">${item.price.toFixed(2)}</p>
                                                )}
                                                {item.asin && (
                                                    <p className="text-sm text-gray-500 mb-4">ASIN: {item.asin}</p>
                                                )}
                                                <button
                                                    onClick={() => addToCart(item)}
                                                    disabled={item.quantity === 0}
                                                    className={`w-full px-4 py-2 rounded-md font-medium ${item.quantity === 0 ? 'bg-gray-300 text-gray-500 cursor-not-allowed' : 'bg-blue-600 text-white hover:bg-blue-700'}`}
                                                >
                                                    {item.quantity === 0 ? 'Out of Stock' : 'Add to Cart'}
                                                </button>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        )}

                        {/* Cart Tab */}
                        {activeTab === 'cart' && (
                            <div className="px-4 py-6 sm:px-0">
                                {cart.length === 0 ? (
                                    <div className="text-center py-12">
                                        <h3 className="text-lg font-medium text-gray-900 mb-2">Your cart is empty</h3>
                                        <p className="text-gray-500">Add items from the shop to get started.</p>
                                    </div>
                                ) : (
                                    <div className="space-y-6">
                                        <div className="bg-white shadow overflow-hidden sm:rounded-md">
                                            <ul className="divide-y divide-gray-200">
                                                {cart.map(item => (
                                                    <li key={item.id} className="px-6 py-4">
                                                        <div className="flex items-center justify-between">
                                                            <div className="flex-1">
                                                                <h3 className="text-lg font-medium text-gray-900">{item.name}</h3>
                                                                <p className="text-sm text-gray-500">Category: {item.category}</p>
                                                            </div>
                                                            <div className="flex items-center space-x-4">
                                                                <div className="flex items-center space-x-2">
                                                                    <button
                                                                        onClick={() => updateCartQuantity(item.id, item.quantity - 1)}
                                                                        className="text-gray-500 hover:text-gray-700"
                                                                    >
                                                                        -
                                                                    </button>
                                                                    <span className="px-3 py-1 bg-gray-100 rounded">{item.quantity}</span>
                                                                    <button
                                                                        onClick={() => updateCartQuantity(item.id, item.quantity + 1)}
                                                                        className="text-gray-500 hover:text-gray-700"
                                                                    >
                                                                        +
                                                                    </button>
                                                                </div>
                                                                <button
                                                                    onClick={() => removeFromCart(item.id)}
                                                                    className="text-red-600 hover:text-red-800"
                                                                >
                                                                    Remove
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </li>
                                                ))}
                                            </ul>
                                        </div>

                                        <div className="bg-white shadow sm:rounded-lg">
                                            <div className="px-6 py-4">
                                                <h3 className="text-lg font-medium text-gray-900 mb-4">Checkout Options</h3>
                                                
                                                {/* Billing Method Selection */}
                                                <div className="mb-6">
                                                    <label className="block text-sm font-medium text-gray-700 mb-3">
                                                        Billing Method
                                                    </label>
                                                    <div className="flex space-x-6">
                                                        <label className="flex items-center">
                                                            <input
                                                                type="radio"
                                                                name="billingMethod"
                                                                value="user"
                                                                checked={billingMethod === 'user'}
                                                                onChange={(e) => {
                                                                    setBillingMethod(e.target.value);
                                                                    setJobNumber('');
                                                                }}
                                                                className="mr-2 text-blue-600"
                                                            />
                                                            Bill to User
                                                        </label>
                                                        <label className="flex items-center">
                                                            <input
                                                                type="radio"
                                                                name="billingMethod"
                                                                value="job"
                                                                checked={billingMethod === 'job'}
                                                                onChange={(e) => {
                                                                    setBillingMethod(e.target.value);
                                                                    setSelectedUser(null);
                                                                    setUserSearchTerm('');
                                                                    setShowUserDropdown(false);
                                                                }}
                                                                className="mr-2 text-blue-600"
                                                            />
                                                            Bill to Job Number
                                                        </label>
                                                    </div>
                                                </div>

                                                {/* User Selection (only show when billing to user) */}
                                                {billingMethod === 'user' && (
                                                    <div>
                                                        <h4 className="text-md font-medium text-gray-900 mb-3">Select User</h4>
                                                        {/* Searchable User Dropdown */}
                                                <div className="relative">
                                                    <label className="block text-sm font-medium text-gray-700 mb-2">
                                                        Search and select user
                                                    </label>
                                                    <input
                                                        type="text"
                                                        value={userSearchTerm}
                                                        onChange={(e) => {
                                                            setUserSearchTerm(e.target.value);
                                                            setShowUserDropdown(true);
                                                            if (!e.target.value) setSelectedUser(null);
                                                        }}
                                                        onFocus={() => setShowUserDropdown(true)}
                                                        placeholder="Type to search users by name or cost code..."
                                                        className="block w-full px-4 py-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                                    />
                                                    
                                                    {/* Dropdown Results */}
                                                    {showUserDropdown && filteredUsers.length > 0 && (
                                                        <div className="absolute z-10 mt-1 w-full bg-white shadow-lg max-h-60 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none">
                                                            {filteredUsers.slice(0, 10).map(user => (
                                                                <button
                                                                    key={user.id}
                                                                    onClick={() => handleUserSelect(user)}
                                                                    className={`w-full text-left px-4 py-3 hover:bg-gray-100 focus:outline-none focus:bg-gray-100 ${
                                                                        selectedUser && selectedUser.id === user.id ? 'bg-blue-50' : ''
                                                                    }`}
                                                                >
                                                                    <div className="font-medium text-gray-900">
                                                                        {user.firstName} {user.lastName}
                                                                        {selectedUser && selectedUser.id === user.id && (
                                                                            <span className="ml-2 text-blue-600">✓</span>
                                                                        )}
                                                                    </div>
                                                                    <div className="text-sm text-gray-500">
                                                                        Cost Code: {user.cost_code || user.costCode}
                                                                    </div>
                                                                </button>
                                                            ))}
                                                            {filteredUsers.length > 10 && (
                                                                <div className="px-4 py-2 text-sm text-gray-500 italic">
                                                                    Showing first 10 results. Continue typing to narrow search.
                                                                </div>
                                                            )}
                                                        </div>
                                                    )}
                                                    
                                                    {/* No results message */}
                                                    {showUserDropdown && userSearchTerm && filteredUsers.length === 0 && (
                                                        <div className="absolute z-10 mt-1 w-full bg-white shadow-lg rounded-md py-2 text-base ring-1 ring-black ring-opacity-5">
                                                            <div className="px-4 py-2 text-sm text-gray-500">
                                                                No users found matching "{userSearchTerm}"
                                                            </div>
                                                        </div>
                                                    )}
                                                </div>

                                                {/* Selected User Display */}
                                                {selectedUser && (
                                                    <div className="mt-4 p-3 bg-green-50 border border-green-200 rounded-md">
                                                        <div className="flex items-center">
                                                            <span className="text-green-600 mr-2">✓</span>
                                                            <div>
                                                                <div className="font-medium text-green-800">
                                                                    Selected: {selectedUser.firstName} {selectedUser.lastName}
                                                                </div>
                                                                <div className="text-sm text-green-600">
                                                                    Cost Code: {selectedUser.cost_code || selectedUser.costCode}
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                )}
                                                    </div>
                                                )}

                                                {/* Job Number Input (only show when billing to job) */}
                                                {billingMethod === 'job' && (
                                                    <div>
                                                        <h4 className="text-md font-medium text-gray-900 mb-3">Job Number</h4>
                                                        <div className="mb-4">
                                                            <label className="block text-sm font-medium text-gray-700 mb-2">
                                                                Enter job number to bill to
                                                            </label>
                                                            <input
                                                                type="text"
                                                                value={jobNumber}
                                                                onChange={(e) => setJobNumber(e.target.value)}
                                                                placeholder="Enter job number (e.g., JOB-2024-001)"
                                                                className="block w-full px-4 py-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                                            />
                                                        </div>
                                                        
                                                        {/* Job Number Display */}
                                                        {jobNumber.trim() && (
                                                            <div className="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-md">
                                                                <div className="flex items-center">
                                                                    <span className="text-blue-600 mr-2">💼</span>
                                                                    <div>
                                                                        <div className="font-medium text-blue-800">
                                                                            Will be recorded as: "Job {jobNumber.trim()}"
                                                                        </div>
                                                                        <div className="text-sm text-blue-600">
                                                                            User Name: "Bill to Job" • Department: "Job {jobNumber.trim()}"
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        )}
                                                    </div>
                                                )}
                                                
                                                {/* Submit Button */}
                                                <div className="mt-6 flex justify-center">
                                                    <button
                                                        onClick={handleCheckout}
                                                        disabled={
                                                            (billingMethod === 'user' && !selectedUser) ||
                                                            (billingMethod === 'job' && !jobNumber.trim())
                                                        }
                                                        className={`px-8 py-3 rounded-lg font-medium text-white transition-colors ${
                                                            (billingMethod === 'user' && selectedUser) || (billingMethod === 'job' && jobNumber.trim())
                                                                ? 'bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500'
                                                                : 'bg-gray-400 cursor-not-allowed'
                                                        }`}
                                                    >
                                                        {billingMethod === 'user' 
                                                            ? (selectedUser 
                                                                ? `Complete Checkout for ${selectedUser.firstName} ${selectedUser.lastName}`
                                                                : 'Select a User to Continue'
                                                            )
                                                            : (jobNumber.trim()
                                                                ? `Complete Checkout for Job ${jobNumber.trim()}`
                                                                : 'Enter Job Number to Continue'
                                                            )
                                                        }
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                )}
                            </div>
                        )}

                        {/* Process Shipment Tab */}
                        {activeTab === 'process' && (
                            <div className="px-4 py-6 sm:px-0 space-y-6">
                                {/* Instructions */}
                                <div className="bg-blue-50 border border-blue-200 shadow sm:rounded-lg">
                                    <div className="px-6 py-4">
                                        <h3 className="text-lg font-medium text-blue-800 mb-2">Shipment Processing</h3>
                                        <p className="text-sm text-blue-600">
                                            Select items that arrived in your shipment, then upload the receipt PDF. 
                                            The system will generate a cost allocation report based on checkout history.
                                        </p>
                                    </div>
                                </div>

                                {/* Item Selection */}
                                <div className="bg-white shadow sm:rounded-lg">
                                    <div className="px-6 py-4">
                                        <div className="flex justify-between items-center mb-4">
                                            <h3 className="text-lg font-medium text-gray-900">Select Shipment Items</h3>
                                            <div className="text-sm text-gray-500">
                                                {selectedShipmentItems.length} items selected
                                            </div>
                                        </div>
                                        
                                        {/* Search */}
                                        <div className="mb-4">
                                            <input
                                                type="text"
                                                value={shipmentSearchQuery}
                                                onChange={(e) => setShipmentSearchQuery(e.target.value)}
                                                placeholder="Search items..."
                                                className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                            />
                                        </div>

                                        {/* Compact Item List */}
                                        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2 max-h-96 overflow-y-auto border rounded-lg p-4">
                                            {allItemNames
                                                .filter(name => 
                                                    shipmentSearchQuery === '' || 
                                                    name.toLowerCase().includes(shipmentSearchQuery.toLowerCase())
                                                )
                                                .map(itemName => (
                                                    <div
                                                        key={itemName}
                                                        onClick={() => toggleShipmentItemSelection(itemName)}
                                                        className={`p-2 rounded-lg cursor-pointer transition-all text-sm border ${selectedShipmentItems.includes(itemName) ? 'bg-green-100 border-green-500 text-green-800 font-medium' : 'bg-gray-50 border-gray-200 text-gray-700 hover:bg-gray-100'}`}
                                                    >
                                                        {itemName}
                                                    </div>
                                                ))
                                            }
                                        </div>

                                        {/* Enhanced PDF Processing - Beta Feature */}
                                        <div className="mt-4 p-4 bg-gradient-to-r from-purple-50 to-blue-50 border border-purple-200 rounded-lg">
                                            <div className="flex items-center justify-between mb-2">
                                                <h4 className="text-sm font-medium text-purple-800 flex items-center">
                                                    🧠 Enhanced PDF Processing
                                                    <span className="ml-2 px-2 py-1 text-xs bg-purple-100 text-purple-700 rounded-full">BETA</span>
                                                </h4>
                                            </div>
                                            <p className="text-xs text-purple-600 mb-3">
                                                Automatically detect items, prices, taxes, and vendors from your receipt PDF. 
                                                Items will be matched with your inventory and pre-populated below.
                                            </p>
                                            <div className="flex justify-center">
                                                <button
                                                    onClick={generateEnhancedShipmentReport}
                                                    disabled={!selectedPdfFile}
                                                    className="bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600 text-white font-bold py-2 px-6 rounded-lg disabled:bg-gray-300 transition-all duration-200 transform hover:scale-105"
                                                >
                                                    🔍 Smart PDF Analysis
                                                </button>
                                            </div>
                                        </div>

                                        {/* Traditional Upload Button */}
                                        <div className="mt-4 flex justify-between items-center">
                                            <button
                                                onClick={() => setSelectedShipmentItems([])}
                                                className="text-sm text-gray-600 hover:text-gray-800"
                                            >
                                                Clear Selection
                                            </button>
                                            <button
                                                onClick={handleUploadShipmentPdf}
                                                disabled={selectedShipmentItems.length === 0}
                                                className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-6 rounded-lg disabled:bg-gray-300"
                                            >
                                                Upload Shipment PDF ({selectedShipmentItems.length} items)
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        )}

                        {/* Users Tab */}
                        {activeTab === 'users' && (
                            <div className="px-4 py-6 sm:px-0 space-y-6">
                                <div className="bg-white shadow sm:rounded-lg">
                                        <div className="px-6 py-4">
                                            <h3 className="text-lg font-medium text-gray-900 mb-4">Upload Users CSV</h3>
                                            <p className="text-sm text-gray-600 mb-4">
                                                CSV should have columns: FirstName, LastName, CostCode
                                            </p>
                                            <input
                                                type="file"
                                                accept=".csv"
                                                onChange={(e) => setSelectedUserFile(e.target.files[0])}
                                                className="mb-4"
                                            />
                                            <div className="flex space-x-4">
                                                <button
                                                    onClick={handleUserCsvProcess}
                                                    disabled={!selectedUserFile}
                                                    className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg disabled:bg-gray-300"
                                                >
                                                    Upload Users CSV
                                                </button>
                                                <button
                                                    onClick={exportUsers}
                                                    className="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-lg"
                                                >
                                                    Export Users
                                                </button>
                                            </div>
                                            {userUploadStatus && (
                                                <p className="mt-4 text-center font-semibold text-gray-700">{userUploadStatus}</p>
                                            )}
                                        </div>
                                    </div>

                                    <div className="bg-white shadow overflow-hidden sm:rounded-md">
                                    <div className="px-6 py-4 border-b border-gray-200">
                                        <h3 className="text-lg font-medium text-gray-900">Users List</h3>
                                    </div>
                                    <table className="min-w-full divide-y divide-gray-200">
                                        <thead className="bg-gray-50">
                                            <tr>
                                                <th 
                                                    onClick={() => handleSort('firstName', setUserSortConfig, userSortConfig)}
                                                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                                                >
                                                    First Name {userSortConfig.key === 'firstName' && (userSortConfig.direction === 'ascending' ? '↑' : '↓')}
                                                </th>
                                                <th 
                                                    onClick={() => handleSort('lastName', setUserSortConfig, userSortConfig)}
                                                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                                                >
                                                    Last Name {userSortConfig.key === 'lastName' && (userSortConfig.direction === 'ascending' ? '↑' : '↓')}
                                                </th>
                                                <th 
                                                    onClick={() => handleSort('cost_code', setUserSortConfig, userSortConfig)}
                                                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                                                >
                                                    Cost Code {userSortConfig.key === 'cost_code' && (userSortConfig.direction === 'ascending' ? '↑' : '↓')}
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody className="bg-white divide-y divide-gray-200">
                                            {sortData(users, userSortConfig).map(user => (
                                                <tr key={user.id}>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{user.firstName}</td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{user.lastName}</td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{user.cost_code || user.costCode}</td>
                                                </tr>
                                            ))}
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        )}

                        {/* Unified Inventory Management Tab */}
                        {activeTab === 'inventory-management' && (
                            <div className="px-4 py-6 sm:px-0 space-y-6">
                                {/* Manual Item Creation */}
                                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                                    <div className="flex items-center justify-between mb-3">
                                        <div className="flex items-center">
                                            <span className="text-2xl mr-2">➕</span>
                                            <h3 className="text-lg font-medium text-blue-900">Add New Item</h3>
                                        </div>
                                        <button
                                            onClick={() => setShowAddItemForm(!showAddItemForm)}
                                            className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                        >
                                            {showAddItemForm ? 'Cancel' : 'Add Item'}
                                        </button>
                                    </div>
                                    
                                    {showAddItemForm && (
                                        <div className="mt-4 bg-white rounded-lg p-4 border border-blue-200">
                                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                                <div>
                                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                                        Item Name *
                                                    </label>
                                                    <input
                                                        type="text"
                                                        value={newItemName}
                                                        onChange={(e) => setNewItemName(e.target.value)}
                                                        placeholder="Enter item name..."
                                                        className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                                    />
                                                </div>
                                                
                                                <div>
                                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                                        Price ($)
                                                    </label>
                                                    <input
                                                        type="number"
                                                        step="0.01"
                                                        min="0"
                                                        value={newItemPrice}
                                                        onChange={(e) => setNewItemPrice(e.target.value)}
                                                        placeholder="0.00"
                                                        className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                                    />
                                                </div>
                                                
                                                <div>
                                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                                        Initial Quantity
                                                    </label>
                                                    <input
                                                        type="number"
                                                        min="0"
                                                        value={newItemQuantity}
                                                        onChange={(e) => setNewItemQuantity(e.target.value)}
                                                        placeholder="0"
                                                        className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                                    />
                                                </div>
                                                
                                                <div>
                                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                                        ASIN
                                                    </label>
                                                    <input
                                                        type="text"
                                                        value={newItemASIN}
                                                        onChange={(e) => setNewItemASIN(e.target.value)}
                                                        placeholder="Amazon ASIN..."
                                                        className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                                    />
                                                </div>
                                                
                                                <div className="md:col-span-2">
                                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                                        Category
                                                    </label>
                                                    <select
                                                        value={newItemCategory}
                                                        onChange={(e) => setNewItemCategory(e.target.value)}
                                                        className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                                    >
                                                        <option value="">Select a category...</option>
                                                        {categories.filter(cat => cat !== 'All').map(category => (
                                                            <option key={category} value={category}>{category}</option>
                                                        ))}
                                                    </select>
                                                </div>
                                            </div>
                                            
                                            <div className="flex items-center justify-between mt-4">
                                                <div className="flex space-x-2">
                                                    <button
                                                        onClick={handleAddItem}
                                                        disabled={!newItemName.trim()}
                                                        className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed focus:outline-none focus:ring-2 focus:ring-blue-500"
                                                    >
                                                        Create Item
                                                    </button>
                                                    <button
                                                        onClick={cancelAddItem}
                                                        className="px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-500"
                                                    >
                                                        Cancel
                                                    </button>
                                                </div>
                                                {addItemStatus && (
                                                    <div className={`text-sm ${addItemStatus.includes('Error') ? 'text-red-600' : addItemStatus.includes('success') ? 'text-green-600' : 'text-blue-600'}`}>
                                                        {addItemStatus}
                                                    </div>
                                                )}
                                            </div>
                                        </div>
                                    )}
                                    
                                    <p className="text-sm text-blue-700 mt-2">
                                        💡 Tip: Create new inventory items manually with prices and initial quantities
                                    </p>
                                </div>
                                {/* Barcode Scanning Section */}
                                <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                                    <div className="flex items-center mb-3">
                                        <span className="text-2xl mr-2">📊</span>
                                        <h3 className="text-lg font-medium text-green-900">Inventory Update Scanner</h3>
                                    </div>
                                    <div className="flex gap-2">
                                        <div className="flex-1">
                                            <input
                                                id="admin-barcode-input"
                                                type="text"
                                                value={adminBarcodeInput}
                                                onChange={(e) => setAdminBarcodeInput(e.target.value)}
                                                onKeyDown={handleAdminBarcodeInput}
                                                placeholder="Scan barcode or type item name to update quantity..."
                                                className="block w-full px-3 py-2 border border-green-300 rounded-md shadow-sm focus:outline-none focus:ring-green-500 focus:border-green-500 bg-white"
                                                autoFocus
                                            />
                                        </div>
                                        <button
                                            onClick={handleManualAdminBarcodeSubmit}
                                            className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 whitespace-nowrap"
                                        >
                                            Update Quantity
                                        </button>
                                    </div>
                                    <p className="text-sm text-green-700 mt-2">
                                        💡 Tip: Scan item barcode to quickly update inventory quantities. Perfect for receiving shipments!
                                    </p>
                                </div>

                                <div className="bg-white shadow sm:rounded-lg">
                                    <div className="px-6 py-4">
                                        <h3 className="text-lg font-medium text-gray-900 mb-4">Upload Items CSV</h3>
                                        <p className="text-sm text-gray-600 mb-4">
                                            CSV should have columns: Item (required), Stock Quantity (required), Price (optional), ASIN (optional), Category (optional)
                                        </p>
                                        <input
                                            type="file"
                                            accept=".csv"
                                            onChange={(e) => setSelectedItemFile(e.target.files[0])}
                                            className="mb-4"
                                        />
                                        <div className="flex space-x-4">
                                            <button
                                                onClick={handleItemCsvProcess}
                                                disabled={!selectedItemFile}
                                                className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg disabled:bg-gray-300"
                                            >
                                                Upload Items CSV
                                            </button>
                                            <button
                                                onClick={exportInventory}
                                                className="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-lg"
                                            >
                                                Export Inventory
                                            </button>
                                            <button
                                                onClick={() => setShowCategoryManager(true)}
                                                className="bg-purple-500 hover:bg-purple-600 text-white font-bold py-2 px-4 rounded-lg"
                                            >
                                                Manage Categories
                                            </button>
                                            <button
                                                onClick={() => {
                                                    setShowBulkUpdate(!showBulkUpdate);
                                                    if (showBulkUpdate) {
                                                        // Reset selections when exiting bulk mode
                                                        setSelectedItems([]);
                                                        setBulkUpdateCategory('');
                                                    }
                                                }}
                                                className={`font-bold py-2 px-4 rounded-lg ${showBulkUpdate ? 'bg-red-500 hover:bg-red-600 text-white' : 'bg-orange-500 hover:bg-orange-600 text-white'}`}
                                            >
                                                {showBulkUpdate ? 'Exit Bulk Mode' : 'Bulk Update'}
                                            </button>
                                        </div>
                                        {itemUploadStatus && (
                                            <p className="mt-4 text-center font-semibold text-gray-700">{itemUploadStatus}</p>
                                        )}
                                    </div>
                                </div>

                                {/* Search and Filter */}
                                <div className="bg-white shadow sm:rounded-lg">
                                    <div className="px-6 py-4">
                                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                                            <div>
                                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                                    Search Items:
                                                </label>
                                                <input
                                                    type="text"
                                                    value={searchQuery}
                                                    onChange={(e) => setSearchQuery(e.target.value)}
                                                    placeholder="Search by name, ASIN, or category..."
                                                    className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                                />
                                            </div>
                                            <div>
                                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                                    Filter by Category:
                                                </label>
                                                <select
                                                    value={categoryFilter}
                                                    onChange={(e) => setCategoryFilter(e.target.value)}
                                                    className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                                >
                                                    {categories.map(category => (
                                                        <option key={category} value={category}>{category}</option>
                                                    ))}
                                                </select>
                                            </div>
                                        </div>
                                        <div className="text-sm text-gray-600">
                                            Showing {filteredItems.length} of {items.length} items
                                        </div>
                                    </div>
                                </div>

                                {/* Bulk Update Control Panel */}
                                {showBulkUpdate && (
                                    <div className="bg-orange-50 border border-orange-200 shadow sm:rounded-lg">
                                        <div className="px-6 py-4">
                                            <div className="flex items-center justify-between">
                                                <div>
                                                    <h3 className="text-lg font-medium text-orange-800">Bulk Update Mode</h3>
                                                    <p className="text-sm text-orange-600">
                                                        {selectedItems.length} items selected. Check boxes in the table below to select items for bulk category update.
                                                    </p>
                                                </div>
                                                <div className="flex space-x-2">
                                                    <button
                                                        onClick={selectAllItems}
                                                        className="bg-orange-500 hover:bg-orange-600 text-white px-3 py-2 rounded text-sm"
                                                    >
                                                        {selectedItems.length === filteredItems.length ? 'Deselect All' : 'Select All'}
                                                    </button>
                                                    <button
                                                        onClick={() => {
                                                            if (selectedItems.length === 0) {
                                                                cancelBulkUpdate();
                                                            } else if (bulkUpdateCategory) {
                                                                bulkUpdateCategories();
                                                            } else {
                                                                alert('Please select a category first');
                                                            }
                                                        }}
                                                        disabled={selectedItems.length === 0}
                                                        className="bg-green-500 hover:bg-green-600 text-white px-3 py-2 rounded text-sm disabled:bg-gray-300"
                                                    >
                                                        {selectedItems.length === 0 ? 'Select Items' : 'Apply Category'}
                                                    </button>
                                                    <button
                                                        onClick={cancelBulkUpdate}
                                                        className="bg-gray-500 hover:bg-gray-600 text-white px-3 py-2 rounded text-sm"
                                                    >
                                                        Cancel
                                                    </button>
                                                </div>
                                            </div>
                                            {selectedItems.length > 0 && (
                                                <div className="mt-3 flex items-end space-x-4">
                                                    <div className="flex-1">
                                                        <label className="block text-sm font-medium text-orange-700 mb-1">
                                                            Apply Category to {selectedItems.length} selected items:
                                                        </label>
                                                        <select
                                                            value={bulkUpdateCategory}
                                                            onChange={(e) => setBulkUpdateCategory(e.target.value)}
                                                            className="block w-full px-3 py-2 border border-orange-300 rounded-md shadow-sm focus:outline-none focus:ring-orange-500 focus:border-orange-500"
                                                        >
                                                            <option value="">Select a category...</option>
                                                            {categories.filter(cat => cat !== 'All').map(category => (
                                                                <option key={category} value={category}>{category}</option>
                                                            ))}
                                                        </select>
                                                    </div>
                                                    <button
                                                        onClick={bulkUpdateCategories}
                                                        disabled={!bulkUpdateCategory}
                                                        className="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg disabled:bg-gray-300 whitespace-nowrap"
                                                    >
                                                        Update Now
                                                    </button>
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                )}

                                <div className="bg-white shadow overflow-hidden sm:rounded-md">
                                    <div className="px-6 py-4 border-b border-gray-200">
                                        <h3 className="text-lg font-medium text-gray-900">Items List</h3>
                                    </div>
                                    <table className="min-w-full divide-y divide-gray-200">
                                        <thead className="bg-gray-50">
                                            <tr>
                                                {showBulkUpdate && (
                                                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        <input
                                                            type="checkbox"
                                                            checked={selectedItems.length === filteredItems.length && filteredItems.length > 0}
                                                            onChange={selectAllItems}
                                                            className="rounded"
                                                        />
                                                    </th>
                                                )}
                                                <th 
                                                    onClick={() => handleSort('name', setItemSortConfig, itemSortConfig)}
                                                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                                                >
                                                    Name {itemSortConfig.key === 'name' && (itemSortConfig.direction === 'ascending' ? '↑' : '↓')}
                                                </th>
                                                <th 
                                                    onClick={() => handleSort('quantity', setItemSortConfig, itemSortConfig)}
                                                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                                                >
                                                    Stock {itemSortConfig.key === 'quantity' && (itemSortConfig.direction === 'ascending' ? '↑' : '↓')}
                                                </th>
                                                <th 
                                                    onClick={() => handleSort('category', setItemSortConfig, itemSortConfig)}
                                                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                                                >
                                                    Category {itemSortConfig.key === 'category' && (itemSortConfig.direction === 'ascending' ? '↑' : '↓')}
                                                </th>
                                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                    ASIN
                                                </th>
                                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                    Actions
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody className="bg-white divide-y divide-gray-200">
                                            {sortData(filteredItems, itemSortConfig).map(item => (
                                                <tr key={item.id}>
                                                    {showBulkUpdate && (
                                                        <td className="px-6 py-4 whitespace-nowrap">
                                                            <input
                                                                type="checkbox"
                                                                checked={selectedItems.includes(item.id)}
                                                                onChange={() => toggleItemSelection(item.id)}
                                                                className="rounded"
                                                            />
                                                        </td>
                                                    )}
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{item.name}</td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${item.quantity === 0 ? 'bg-gray-100 text-gray-800' : item.quantity <= (item.minThreshold || 5) ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800'}`}>
                                                            {item.quantity === 0 ? 'No Stock' : item.quantity}
                                                        </span>
                                                    </td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{item.category}</td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{item.asin}</td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                                        <div className="flex space-x-2">
                                                            <button
                                                                onClick={() => startEditingItem(item)}
                                                                className="text-blue-600 hover:text-blue-900"
                                                            >
                                                                Edit
                                                            </button>
                                                            <button
                                                                onClick={() => deleteItem(item.id)}
                                                                className="text-red-600 hover:text-red-900"
                                                            >
                                                                Delete
                                                            </button>
                                                        </div>
                                                    </td>
                                                </tr>
                                            ))}
                                        </tbody>
                                    </table>
                                </div>

                                {/* Bulk Inventory Management Section */}
                                <div className="bg-white shadow sm:rounded-lg">
                                    <div className="px-6 py-4 border-b border-gray-200 flex items-center justify-between">
                                        <div>
                                            <h3 className="text-lg font-medium text-gray-900">Inventory Management</h3>
                                            <p className="text-sm text-gray-500 mt-1">Edit quantities and prices, manage inventory in bulk</p>
                                        </div>
                                        <div className="flex space-x-2">
                                            <button
                                                onClick={() => setIsScanMode(!isScanMode)}
                                                className={`px-4 py-2 rounded-md font-medium ${isScanMode ? 'bg-green-600 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}
                                            >
                                                {isScanMode ? '📷 Exit Scan Mode' : '📷 Scan Mode'}
                                            </button>
                                            <button
                                                onClick={setAllQuantitiesToZero}
                                                className="px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600"
                                            >
                                                Clear All Stock
                                            </button>
                                        </div>
                                    </div>

                                    {/* Scan Mode Interface */}
                                    {isScanMode && (
                                        <div className="px-6 py-4 bg-green-50 border-b border-green-200">
                                            <div className="flex items-center space-x-4">
                                                <div className="flex-1">
                                                    <input
                                                        id="bulk-barcode-input"
                                                        type="text"
                                                        value={bulkBarcodeInput}
                                                        onChange={(e) => setBulkBarcodeInput(e.target.value)}
                                                        onKeyDown={handleBulkBarcodeInput}
                                                        placeholder="Scan barcode or type item name..."
                                                        className="block w-full px-3 py-2 border border-green-300 rounded-md shadow-sm focus:outline-none focus:ring-green-500 focus:border-green-500"
                                                        autoFocus
                                                    />
                                                </div>
                                                <div className="text-sm text-green-700">
                                                    Scans: {scanCount}
                                                </div>
                                                <button
                                                    onClick={clearScanData}
                                                    className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
                                                >
                                                    Clear Data
                                                </button>
                                            </div>
                                        </div>
                                    )}

                                    {/* Search and Filters */}
                                    <div className="px-6 py-4 border-b border-gray-200">
                                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                            <div>
                                                <input
                                                    type="text"
                                                    value={bulkInventorySearch}
                                                    onChange={(e) => setBulkInventorySearch(e.target.value)}
                                                    placeholder="Search items..."
                                                    className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                                />
                                            </div>
                                            <div>
                                                <select
                                                    value={bulkInventoryCategoryFilter}
                                                    onChange={(e) => setBulkInventoryCategoryFilter(e.target.value)}
                                                    className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                                >
                                                    {categories.map(category => (
                                                        <option key={category} value={category}>{category}</option>
                                                    ))}
                                                </select>
                                            </div>
                                            <div className="flex space-x-2">
                                                <button
                                                    onClick={exportBulkInventoryTemplate}
                                                    className="flex-1 bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg"
                                                >
                                                    📥 Export CSV
                                                </button>
                                                <div className="flex-1 flex space-x-1">
                                                    <input
                                                        type="file"
                                                        accept=".csv"
                                                        onChange={(e) => setSelectedBulkFile(e.target.files[0])}
                                                        className="flex-1 text-xs"
                                                    />
                                                    <button
                                                        onClick={handleBulkInventoryCsvProcess}
                                                        disabled={!selectedBulkFile}
                                                        className="px-3 py-2 bg-green-500 hover:bg-green-600 disabled:bg-gray-300 text-white font-bold rounded-lg"
                                                    >
                                                        📁
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                        {bulkUploadStatus && (
                                            <p className="mt-2 text-sm font-semibold text-gray-700">{bulkUploadStatus}</p>
                                        )}
                                    </div>

                                    {/* Items Table */}
                                    <div className="overflow-x-auto">
                                        <table className="min-w-full divide-y divide-gray-200">
                                            <thead className="bg-gray-50">
                                                <tr>
                                                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        Item Name
                                                    </th>
                                                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        Current Qty
                                                    </th>
                                                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        New Quantity
                                                    </th>
                                                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        Current Price
                                                    </th>
                                                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        New Price
                                                    </th>
                                                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        Category
                                                    </th>
                                                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        ASIN
                                                    </th>
                                                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        Actions
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody className="bg-white divide-y divide-gray-200">
                                                {bulkInventoryItems.map(item => (
                                                    <tr key={item.id} className={`${recentlyScannedItems.has(item.id) ? 'bg-green-100' : ''}`}>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                                            <div className="flex items-center">
                                                                {recentlyScannedItems.has(item.id) && <span className="mr-2">✨</span>}
                                                                {item.name}
                                                            </div>
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap">
                                                            <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${item.quantity === 0 ? 'bg-gray-100 text-gray-800' : item.quantity <= (item.minThreshold || 5) ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800'}`}>
                                                                {item.quantity === 0 ? 'No Stock' : item.quantity}
                                                            </span>
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap">
                                                            <input
                                                                type="number"
                                                                min="0"
                                                                value={bulkQuantities[item.id] !== undefined ? bulkQuantities[item.id] : item.quantity}
                                                                onChange={(e) => handleBulkQuantityChange(item.id, e.target.value)}
                                                                onFocus={() => {
                                                                    const newEditing = new Set(bulkEditingItems);
                                                                    newEditing.add(item.id);
                                                                    setBulkEditingItems(newEditing);
                                                                }}
                                                                className="w-20 px-2 py-1 border border-gray-300 rounded text-center focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                                            />
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm font-semibold text-green-600">
                                                            {item.price && item.price > 0 ? `$${item.price.toFixed(2)}` : '-'}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap">
                                                            <div className="relative">
                                                                <span className="absolute left-2 top-1 text-gray-500">$</span>
                                                                <input
                                                                    type="number"
                                                                    min="0"
                                                                    step="0.01"
                                                                    value={bulkPrices[item.id] !== undefined ? bulkPrices[item.id] : (item.price || '')}
                                                                    onChange={(e) => handleBulkPriceChange(item.id, e.target.value)}
                                                                    onFocus={() => {
                                                                        const newEditing = new Set(bulkEditingItems);
                                                                        newEditing.add(item.id);
                                                                        setBulkEditingItems(newEditing);
                                                                    }}
                                                                    className="w-24 pl-6 pr-2 py-1 border border-gray-300 rounded text-center focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                                                    placeholder="0.00"
                                                                />
                                                            </div>
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                            {item.category}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                            {item.asin || '-'}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                                            {bulkEditingItems.has(item.id) && (
                                                                <button
                                                                    onClick={() => saveBulkItem(item.id)}
                                                                    className="text-blue-600 hover:text-blue-900 mr-2"
                                                                >
                                                                    💾 Save
                                                                </button>
                                                            )}
                                                        </td>
                                                    </tr>
                                                ))}
                                                {bulkInventoryItems.length === 0 && (
                                                    <tr>
                                                        <td colSpan="8" className="px-6 py-4 text-center text-gray-500">
                                                            No items found. Try adjusting your search or filter.
                                                        </td>
                                                    </tr>
                                                )}
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        )}

                        {/* Checkout History Tab */}
                        {activeTab === 'history' && (
                            <div className="px-4 py-6 sm:px-0 space-y-6">
                                <div className="bg-white shadow sm:rounded-lg">
                                    <div className="px-6 py-4">
                                        <h3 className="text-lg font-medium text-gray-900 mb-4">Upload History CSV</h3>
                                        <p className="text-sm text-gray-600 mb-4">
                                            CSV should have columns: ItemName, DepartmentId, UserName, JobNum, DateEntered (optional)
                                            <br />
                                            Use format from inventoried_items.csv. JobNum can be NULL if no job number is assigned.
                                        </p>
                                        <input
                                            type="file"
                                            accept=".csv"
                                            onChange={(e) => setSelectedHistoryFile(e.target.files[0])}
                                            className="mb-4"
                                        />
                                        <div className="flex gap-4">
                                            <button
                                                onClick={handleHistoryCsvProcess}
                                                disabled={!selectedHistoryFile}
                                                className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg disabled:bg-gray-300"
                                            >
                                                Upload History CSV
                                            </button>
                                            <button
                                                onClick={clearAllHistory}
                                                className="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-lg"
                                            >
                                                🗑️ Clear All History
                                            </button>
                                        </div>
                                        {historyUploadStatus && (
                                            <p className="mt-4 text-center font-semibold text-gray-700">{historyUploadStatus}</p>
                                        )}
                                    </div>
                                </div>

                                <div className="bg-white shadow overflow-hidden sm:rounded-md">
                                    <div className="px-6 py-4 border-b border-gray-200">
                                        <h3 className="text-lg font-medium text-gray-900">Checkout History</h3>
                                        {editHistoryStatus && (
                                            <div className={`mt-2 text-sm ${editHistoryStatus.includes('Error') ? 'text-red-600' : 'text-green-600'}`}>
                                                {editHistoryStatus}
                                            </div>
                                        )}
                                    </div>
                                    <table className="min-w-full divide-y divide-gray-200">
                                        <thead className="bg-gray-50">
                                            <tr>
                                                <th 
                                                    onClick={() => handleSort('itemName', setHistorySortConfig, historySortConfig)}
                                                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                                                >
                                                    Item {historySortConfig.key === 'itemName' && (historySortConfig.direction === 'ascending' ? '↑' : '↓')}
                                                </th>
                                                <th 
                                                    onClick={() => handleSort('userName', setHistorySortConfig, historySortConfig)}
                                                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                                                >
                                                    User {historySortConfig.key === 'userName' && (historySortConfig.direction === 'ascending' ? '↑' : '↓')}
                                                </th>
                                                <th 
                                                    onClick={() => handleSort('departmentId', setHistorySortConfig, historySortConfig)}
                                                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                                                >
                                                    Department {historySortConfig.key === 'departmentId' && (historySortConfig.direction === 'ascending' ? '↑' : '↓')}
                                                </th>
                                                <th 
                                                    onClick={() => handleSort('jobNum', setHistorySortConfig, historySortConfig)}
                                                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                                                >
                                                    Job Number {historySortConfig.key === 'jobNum' && (historySortConfig.direction === 'ascending' ? '↑' : '↓')}
                                                </th>
                                                <th 
                                                    onClick={() => handleSort('dateEntered', setHistorySortConfig, historySortConfig)}
                                                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                                                >
                                                    Date {historySortConfig.key === 'dateEntered' && (historySortConfig.direction === 'ascending' ? '↑' : '↓')}
                                                </th>
                                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                    Actions
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody className="bg-white divide-y divide-gray-200">
                                            {sortData(checkoutHistory, historySortConfig).map(record => (
                                                <tr key={record.id} className={editingHistoryRecord && editingHistoryRecord.id === record.id ? "bg-yellow-50" : ""}>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                        {editingHistoryRecord && editingHistoryRecord.id === record.id ? (
                                                            <input
                                                                type="text"
                                                                value={editingHistoryRecord.itemName}
                                                                onChange={(e) => setEditingHistoryRecord({...editingHistoryRecord, itemName: e.target.value})}
                                                                className="w-full px-2 py-1 border border-gray-300 rounded text-sm"
                                                            />
                                                        ) : (
                                                            record.itemName
                                                        )}
                                                    </td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                        {editingHistoryRecord && editingHistoryRecord.id === record.id ? (
                                                            <input
                                                                type="text"
                                                                value={editingHistoryRecord.userName}
                                                                onChange={(e) => setEditingHistoryRecord({...editingHistoryRecord, userName: e.target.value})}
                                                                className="w-full px-2 py-1 border border-gray-300 rounded text-sm"
                                                            />
                                                        ) : (
                                                            <div className="flex items-center">
                                                                {record.userName === 'Bill to Job' && (
                                                                    <span className="mr-2 text-blue-600">💼</span>
                                                                )}
                                                                <span className={record.userName === 'Bill to Job' ? 'text-blue-800 font-medium' : ''}>
                                                                    {record.userName}
                                                                </span>
                                                            </div>
                                                        )}
                                                    </td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                        {editingHistoryRecord && editingHistoryRecord.id === record.id ? (
                                                            <input
                                                                type="text"
                                                                value={editingHistoryRecord.departmentId}
                                                                onChange={(e) => setEditingHistoryRecord({...editingHistoryRecord, departmentId: e.target.value})}
                                                                className="w-full px-2 py-1 border border-gray-300 rounded text-sm"
                                                            />
                                                        ) : (
                                                            record.departmentId
                                                        )}
                                                    </td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                        {editingHistoryRecord && editingHistoryRecord.id === record.id ? (
                                                            <input
                                                                type="text"
                                                                value={editingHistoryRecord.jobNumber || editingHistoryRecord.jobNum || ''}
                                                                onChange={(e) => setEditingHistoryRecord({...editingHistoryRecord, jobNumber: e.target.value})}
                                                                className="w-full px-2 py-1 border border-gray-300 rounded text-sm"
                                                                placeholder="-"
                                                            />
                                                        ) : (
                                                            record.jobNum || record.jobNumber || '-'
                                                        )}
                                                    </td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                        {new Date(record.dateEntered).toLocaleDateString()}
                                                    </td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                                        {editingHistoryRecord && editingHistoryRecord.id === record.id ? (
                                                            <div className="flex space-x-2">
                                                                <button
                                                                    onClick={handleSaveHistoryRecord}
                                                                    className="text-green-600 hover:text-green-900"
                                                                >
                                                                    Save
                                                                </button>
                                                                <button
                                                                    onClick={handleCancelEdit}
                                                                    className="text-gray-600 hover:text-gray-900"
                                                                >
                                                                    Cancel
                                                                </button>
                                                            </div>
                                                        ) : (
                                                            <div className="flex space-x-2">
                                                                <button
                                                                    onClick={() => handleEditHistoryRecord(record)}
                                                                    className="text-indigo-600 hover:text-indigo-900"
                                                                >
                                                                    Edit
                                                                </button>
                                                                <button
                                                                    onClick={() => handleDeleteHistoryRecord(record.id)}
                                                                    className="text-red-600 hover:text-red-900"
                                                                >
                                                                    Delete
                                                                </button>
                                                            </div>
                                                        )}
                                                    </td>
                                                </tr>
                                            ))}
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        )}

                        {/* Bulk Inventory Tab */}
                        {/* OLD BULK INVENTORY SECTION REMOVED - MERGED INTO INVENTORY MANAGEMENT */}
                        {false && (
                            <div className="px-4 py-6 sm:px-0 space-y-6">
                                {/* Header and Controls */}
                                <div className="bg-white shadow sm:rounded-lg">
                                    <div className="px-6 py-4">
                                        <h3 className="text-lg font-medium text-gray-900 mb-4">Bulk Inventory Management</h3>
                                        <p className="text-sm text-gray-600 mb-6">
                                            Update quantities for multiple items at once. Edit quantities directly in the table or use CSV import/export.
                                        </p>

                                        {/* Search and Filter Controls */}
                                        <div className="flex flex-col sm:flex-row gap-4 mb-6">
                                            <div className="flex-1">
                                                <input
                                                    type="text"
                                                    placeholder="Search items by name, ASIN, or category..."
                                                    value={bulkInventorySearch}
                                                    onChange={(e) => setBulkInventorySearch(e.target.value)}
                                                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                                />
                                            </div>
                                            <div className="sm:w-48">
                                                <select
                                                    value={bulkInventoryCategoryFilter}
                                                    onChange={(e) => setBulkInventoryCategoryFilter(e.target.value)}
                                                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                                >
                                                    {categories.map(category => (
                                                        <option key={category} value={category}>{category}</option>
                                                    ))}
                                                </select>
                                            </div>
                                        </div>

                                        {/* Mode Toggle */}
                                        <div className="flex items-center gap-4 mb-6">
                                            <button
                                                onClick={toggleScanMode}
                                                className={`font-bold py-2 px-4 rounded-lg transition-colors ${isScanMode ? 'bg-orange-500 hover:bg-orange-600 text-white' : 'bg-blue-500 hover:bg-blue-600 text-white'}`}
                                            >
                                                {isScanMode ? '✏️ Switch to Edit Mode' : '📷 Switch to Scan Mode'}
                                            </button>
                                            {isScanMode && (
                                                <div className="flex items-center gap-2">
                                                    <span className="text-sm font-medium text-gray-700">Scans: {scanCount}</span>
                                                    <button
                                                        onClick={clearScanningData}
                                                        className="text-sm text-gray-500 hover:text-gray-700 underline"
                                                    >
                                                        Clear
                                                    </button>
                                                </div>
                                            )}
                                        </div>

                                        {/* Barcode Scanner Input - Only show in scan mode */}
                                        {isScanMode && (
                                            <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                                                <div className="flex items-center gap-4">
                                                    <div className="flex-1">
                                                        <label className="block text-sm font-medium text-blue-900 mb-2">
                                                            📷 Scan Barcode (Item Name)
                                                        </label>
                                                        <input
                                                            id="bulk-barcode-input"
                                                            type="text"
                                                            value={bulkBarcodeInput}
                                                            onChange={handleBulkBarcodeInput}
                                                            onKeyDown={handleBulkBarcodeInput}
                                                            placeholder="Scan or type item name..."
                                                            className="w-full px-4 py-2 border-2 border-blue-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-lg"
                                                            autoFocus
                                                        />
                                                        <p className="text-xs text-blue-600 mt-1">
                                                            Each scan will increment the item quantity by 1
                                                        </p>
                                                    </div>
                                                </div>
                                            </div>
                                        )}

                                        {/* Action Buttons - Only show in edit mode */}
                                        {!isScanMode && (
                                            <div className="flex flex-wrap gap-4 mb-6">
                                                <button
                                                    onClick={exportBulkInventory}
                                                    className="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-lg"
                                                >
                                                    📊 Export Template
                                                </button>
                                                <button
                                                    onClick={setAllQuantitiesToZero}
                                                    className="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-lg"
                                                >
                                                    🗑️ Set All to Zero
                                                </button>
                                            </div>
                                        )}

                                        {/* CSV Import - Only show in edit mode */}
                                        {!isScanMode && (
                                            <div className="border-t pt-6">
                                            <h4 className="text-md font-medium text-gray-900 mb-3">CSV Import</h4>
                                            <p className="text-sm text-gray-600 mb-3">
                                                Import quantities from CSV. Use the export template above to get the correct format.
                                            </p>
                                            <div className="flex items-center gap-4">
                                                <input
                                                    type="file"
                                                    accept=".csv"
                                                    onChange={(e) => setSelectedBulkFile(e.target.files[0])}
                                                    className="flex-1"
                                                />
                                                <button
                                                    onClick={handleBulkInventoryCsvProcess}
                                                    disabled={!selectedBulkFile}
                                                    className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg disabled:bg-gray-300"
                                                >
                                                    📁 Import CSV
                                                </button>
                                            </div>
                                            {bulkUploadStatus && (
                                                <p className="mt-2 text-sm font-semibold text-gray-700">{bulkUploadStatus}</p>
                                            )}
                                        </div>
                                        )}
                                    </div>
                                </div>

                                {/* Items Table */}
                                <div className="bg-white shadow overflow-hidden sm:rounded-lg">
                                    <div className="px-6 py-4 border-b border-gray-200">
                                        <h3 className="text-lg font-medium text-gray-900">Items ({bulkInventoryItems.length})</h3>
                                    </div>
                                    <div className="overflow-x-auto">
                                        <table className="min-w-full divide-y divide-gray-200">
                                            <thead className="bg-gray-50">
                                                <tr>
                                                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        Item Name
                                                    </th>
                                                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        Current Qty
                                                    </th>
                                                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        New Quantity
                                                    </th>
                                                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        Price
                                                    </th>
                                                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        Category
                                                    </th>
                                                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        ASIN
                                                    </th>
                                                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        Actions
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody className="bg-white divide-y divide-gray-200">
                                                {bulkInventoryItems.map(item => (
                                                    <tr key={item.id} className={`hover:bg-gray-50 ${recentlyScannedItems.has(item.id) ? 'bg-green-100 border-l-4 border-green-500' : ''}`}>
                                                        <td className="px-6 py-4 whitespace-nowrap">
                                                            <div className="text-sm font-medium text-gray-900">
                                                                {recentlyScannedItems.has(item.id) && <span className="text-green-600 mr-2">✨</span>}
                                                                {item.name}
                                                            </div>
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap">
                                                            <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${item.quantity === 0 ? 'bg-gray-100 text-gray-800' : item.quantity <= (item.minThreshold || 5) ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800'}`}>
                                                                {item.quantity === 0 ? 'No Stock' : item.quantity}
                                                            </span>
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap">
                                                            <input
                                                                type="number"
                                                                min="0"
                                                                value={bulkQuantities[item.id] !== undefined ? bulkQuantities[item.id] : item.quantity}
                                                                onChange={(e) => handleBulkQuantityChange(item.id, e.target.value)}
                                                                onFocus={() => {
                                                                    const newEditing = new Set(bulkEditingItems);
                                                                    newEditing.add(item.id);
                                                                    setBulkEditingItems(newEditing);
                                                                }}
                                                                className="w-20 px-2 py-1 border border-gray-300 rounded text-center focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                                            />
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm font-semibold text-green-600">
                                                            {item.price && item.price > 0 ? `$${item.price.toFixed(2)}` : '-'}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                            {item.category}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                            {item.asin || '-'}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                                            {bulkEditingItems.has(item.id) && (
                                                                <button
                                                                    onClick={() => saveBulkItem(item.id)}
                                                                    className="text-blue-600 hover:text-blue-900 mr-2"
                                                                >
                                                                    💾 Save
                                                                </button>
                                                            )}
                                                        </td>
                                                    </tr>
                                                ))}
                                                {bulkInventoryItems.length === 0 && (
                                                    <tr>
                                                        <td colSpan="7" className="px-6 py-4 text-center text-gray-500">
                                                            No items found. Try adjusting your search or filter.
                                                        </td>
                                                    </tr>
                                                )}
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        )}

                        {/* Notifications Tab */}
                        {activeTab === 'notifications' && (
                            <div className="px-4 py-6 sm:px-0">
                                <div className="bg-white shadow sm:rounded-lg">
                                    <div className="px-6 py-4">
                                        <h3 className="text-lg font-medium text-gray-900 mb-4">Low Stock Notifications</h3>
                                        {notifications.length === 0 ? (
                                            <p className="text-gray-500">No low stock items at this time.</p>
                                        ) : (
                                            <div className="space-y-4">
                                                {notifications.map(notification => (
                                                    <div key={notification.id} className="flex items-center p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                                                        <div className="flex-shrink-0">
                                                            <span className="text-yellow-600">⚠️</span>
                                                        </div>
                                                        <div className="ml-3">
                                                            <p className="text-sm font-medium text-yellow-800">
                                                                {notification.message}
                                                            </p>
                                                        </div>
                                                    </div>
                                                ))}
                                            </div>
                                        )}
                                    </div>
                                </div>
                            </div>
                        )}
                    </main>

                    {/* Category Manager Modal */}
                    {showCategoryManager && (
                        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
                            <div className="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
                                <div className="mt-3">
                                    <h3 className="text-lg font-medium text-gray-900 mb-4">Manage Categories</h3>
                                    
                                    <div className="mb-4">
                                        <label className="block text-sm font-medium text-gray-700 mb-2">
                                            Current Categories:
                                        </label>
                                        <div className="max-h-40 overflow-y-auto border rounded p-2">
                                            {categories.filter(cat => cat !== 'All').map(category => (
                                                <div key={category} className="py-1 px-2 text-sm">{category}</div>
                                            ))}
                                        </div>
                                    </div>

                                    <div className="mb-4">
                                        <label className="block text-sm font-medium text-gray-700 mb-2">
                                            Add New Category:
                                        </label>
                                        <input
                                            type="text"
                                            value={newCategory}
                                            onChange={(e) => setNewCategory(e.target.value)}
                                            placeholder="Enter category name..."
                                            className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                            onKeyPress={(e) => e.key === 'Enter' && addCategory()}
                                        />
                                    </div>

                                    <div className="flex justify-end space-x-4">
                                        <button
                                            onClick={() => {
                                                setShowCategoryManager(false);
                                                setNewCategory('');
                                            }}
                                            className="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400"
                                        >
                                            Close
                                        </button>
                                        <button
                                            onClick={addCategory}
                                            disabled={!newCategory.trim()}
                                            className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:bg-gray-300"
                                        >
                                            Add Category
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}

                    {/* Item Edit Modal */}
                    {editingItem && (
                        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
                            <div className="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
                                <div className="mt-3">
                                    <h3 className="text-lg font-medium text-gray-900 mb-4">Edit Item</h3>
                                    
                                    <div className="space-y-4">
                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 mb-2">
                                                Item Name:
                                            </label>
                                            <input
                                                type="text"
                                                value={editingItem.name}
                                                onChange={(e) => setEditingItem({...editingItem, name: e.target.value})}
                                                className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                            />
                                        </div>

                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 mb-2">
                                                Category:
                                            </label>
                                            <div className="space-y-2">
                                                <select
                                                    value={editingItem.category}
                                                    onChange={(e) => setEditingItem({...editingItem, category: e.target.value})}
                                                    className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                                >
                                                    {categories.filter(cat => cat !== 'All').map(category => (
                                                        <option key={category} value={category}>{category}</option>
                                                    ))}
                                                </select>
                                                <div className="text-xs text-gray-500">
                                                    Or type a new category:
                                                </div>
                                                <input
                                                    type="text"
                                                    placeholder="Enter new category name..."
                                                    onChange={(e) => {
                                                        if (e.target.value) {
                                                            setEditingItem({...editingItem, category: e.target.value});
                                                        }
                                                    }}
                                                    className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-sm"
                                                />
                                            </div>
                                        </div>

                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 mb-2">
                                                ASIN:
                                            </label>
                                            <input
                                                type="text"
                                                value={editingItem.asin || ''}
                                                onChange={(e) => setEditingItem({...editingItem, asin: e.target.value})}
                                                className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                            />
                                        </div>

                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 mb-2">
                                                Stock Quantity:
                                            </label>
                                            <input
                                                type="number"
                                                value={editingItem.quantity}
                                                onChange={(e) => setEditingItem({...editingItem, quantity: parseInt(e.target.value) || 0})}
                                                className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                            />
                                        </div>

                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 mb-2">
                                                Low Stock Threshold:
                                            </label>
                                            <input
                                                type="number"
                                                value={editingItem.minThreshold || 5}
                                                onChange={(e) => setEditingItem({...editingItem, minThreshold: parseInt(e.target.value) || 5})}
                                                className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                            />
                                        </div>
                                    </div>

                                    <div className="flex justify-end space-x-4 mt-6">
                                        <button
                                            onClick={cancelEditingItem}
                                            className="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400"
                                        >
                                            Cancel
                                        </button>
                                        <button
                                            onClick={saveItemChanges}
                                            className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
                                        >
                                            Save Changes
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}

                    {/* Quantity Input Modal */}
                    {showQuantityModal && (
                        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
                            <div className="relative top-10 mx-auto p-5 border w-full max-w-2xl shadow-lg rounded-md bg-white">
                                <div className="mt-3">
                                        <h3 className="text-lg font-medium text-gray-900 mb-4">Enter Shipment Quantities and Prices</h3>
                                        <p className="text-sm text-gray-600 mb-4">
                                            💡 Prices entered here will be saved to the inventory items and used for cost allocation reporting.
                                        </p>
                                        
                                        <div className="mb-4">
                                            <label className="block text-sm font-medium text-gray-700 mb-2">
                                                Upload Shipment PDF:
                                            </label>
                                            <input
                                                type="file"
                                                accept=".pdf"
                                                onChange={(e) => setSelectedPdfFile(e.target.files[0])}
                                                className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
                                            />
                                        </div>

                                        <div className="mb-4 grid grid-cols-2 gap-4">
                                            <div>
                                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                                    Tax Amount:
                                                </label>
                                                <div className="relative">
                                                    <span className="absolute left-3 top-2 text-gray-500">$</span>
                                                    <input
                                                        type="number"
                                                        min="0"
                                                        step="0.01"
                                                        value={shipmentTax || ''}
                                                        onChange={(e) => setShipmentTax(parseFloat(e.target.value) || 0)}
                                                        className="block w-full pl-8 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                                        placeholder="0.00"
                                                    />
                                                </div>
                                            </div>
                                            <div>
                                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                                    Fees Amount:
                                                </label>
                                                <div className="relative">
                                                    <span className="absolute left-3 top-2 text-gray-500">$</span>
                                                    <input
                                                        type="number"
                                                        min="0"
                                                        step="0.01"
                                                        value={shipmentFees || ''}
                                                        onChange={(e) => setShipmentFees(parseFloat(e.target.value) || 0)}
                                                        className="block w-full pl-8 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                                        placeholder="0.00"
                                                    />
                                                </div>
                                            </div>
                                        </div>

                                        <div className="space-y-3 max-h-96 overflow-y-auto border rounded-lg p-4">
                                            {selectedShipmentItems.map(itemName => (
                                                <div key={itemName} className="flex items-center justify-between p-3 bg-gray-50 rounded">
                                                    <div className="font-medium text-gray-900 flex-1 min-w-0 pr-4">
                                                        <div className="truncate">{itemName}</div>
                                                    </div>
                                                    <div className="flex items-center space-x-3 flex-shrink-0">
                                                        <div className="flex items-center space-x-1">
                                                            <label className="text-sm text-gray-600 whitespace-nowrap">Qty:</label>
                                                            <input
                                                                type="number"
                                                                min="0"
                                                                value={itemQuantities[itemName] || ''}
                                                                onChange={(e) => updateShipmentItemQuantity(itemName, e.target.value)}
                                                                className="w-20 px-2 py-1 border border-gray-300 rounded text-center focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                                                placeholder="0"
                                                            />
                                                        </div>
                                                        <div className="flex items-center space-x-1">
                                                            <label className="text-sm text-gray-600 whitespace-nowrap">Price:</label>
                                                            <div className="relative">
                                                                <span className="absolute left-2 top-1 text-gray-500">$</span>
                                                                <input
                                                                    type="number"
                                                                    min="0"
                                                                    step="0.01"
                                                                    value={itemPrices[itemName] || ''}
                                                                    onChange={(e) => updateItemPrice(itemName, e.target.value)}
                                                                    className="w-24 pl-6 pr-2 py-1 border border-gray-300 rounded text-center focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                                                    placeholder="0.00"
                                                                />
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            ))}
                                        </div>

                                        <div className="flex justify-end space-x-4 mt-6">
                                            <button
                                                onClick={() => {
                                                    setShowQuantityModal(false);
                                                    setItemQuantities({});
                                                    setItemPrices({});
                                                    setSelectedPdfFile(null);
                                                    setShipmentTax(0);
                                                    setShipmentFees(0);
                                                }}
                                                className="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400"
                                            >
                                                Cancel
                                            </button>
                                            <button
                                                onClick={generateShipmentReport}
                                                disabled={!selectedPdfFile || 
                                                         Object.keys(itemQuantities).length === 0 ||
                                                         selectedShipmentItems.some(item => !itemQuantities[item] || !itemPrices[item] || itemQuantities[item] <= 0 || itemPrices[item] <= 0)}
                                                className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:bg-gray-300"
                                            >
                                                Generate Cost Allocation Report
                                            </button>
                                        </div>
                                </div>
                            </div>
                        </div>
                    )}

                    {/* Admin Quantity Update Modal */}
                    {showAdminQuantityModal && scannedItem && (
                        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
                            <div className="relative top-20 mx-auto p-5 border w-full max-w-md shadow-lg rounded-md bg-white">
                                <div className="mt-3">
                                    <div className="flex items-center mb-4">
                                        <span className="text-2xl mr-2">📦</span>
                                        <h3 className="text-lg font-medium text-gray-900">Update Inventory</h3>
                                    </div>
                                    
                                    <div className="mb-4 p-3 bg-gray-50 rounded-lg">
                                        <div className="font-medium text-gray-900 mb-1">{scannedItem.name}</div>
                                        <div className="text-sm text-gray-600">
                                            Current Stock: <span className="font-medium">{scannedItem.quantity}</span>
                                        </div>
                                        <div className="text-sm text-gray-600">
                                            Category: <span className="font-medium">{scannedItem.category}</span>
                                        </div>
                                    </div>

                                    <div className="mb-6">
                                        <label className="block text-sm font-medium text-gray-700 mb-2">
                                            New Quantity:
                                        </label>
                                        <input
                                            type="number"
                                            min="0"
                                            value={quantityUpdate}
                                            onChange={(e) => setQuantityUpdate(e.target.value)}
                                            onKeyDown={(e) => {
                                                if (e.key === 'Enter') {
                                                    updateItemQuantity();
                                                } else if (e.key === 'Escape') {
                                                    cancelQuantityUpdate();
                                                }
                                            }}
                                            className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-green-500 focus:border-green-500 text-lg text-center"
                                            placeholder="Enter new quantity..."
                                            autoFocus
                                        />
                                        <p className="text-xs text-gray-500 mt-1">
                                            Press Enter to update, Escape to cancel
                                        </p>
                                    </div>

                                    <div className="flex justify-end space-x-3">
                                        <button
                                            onClick={cancelQuantityUpdate}
                                            className="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400"
                                        >
                                            Cancel
                                        </button>
                                        <button
                                            onClick={updateItemQuantity}
                                            disabled={quantityUpdate === '' || isNaN(quantityUpdate)}
                                            className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 disabled:bg-gray-300"
                                        >
                                            Update Quantity
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}

                    {/* Cart Add Confirmation Popup */}
                    {showCartPopup && cartPopupItem && (
                        <div className="fixed top-4 right-4 bg-green-500 text-white px-6 py-4 rounded-lg shadow-lg z-50 animate-pulse">
                            <div className="flex items-center">
                                <span className="mr-2">✓</span>
                                <div>
                                    <div className="font-medium">Added to Cart!</div>
                                    <div className="text-sm opacity-90">{cartPopupItem.name}</div>
                                </div>
                                <button
                                    onClick={() => {
                                        setShowCartPopup(false);
                                        setCartPopupItem(null);
                                    }}
                                    className="ml-4 text-white hover:text-gray-200"
                                >
                                    ×
                                </button>
                            </div>
                        </div>
                    )}
                </div>
            );
        };

        // Configure PDF.js worker for enhanced PDF processing
        if (typeof pdfjsLib !== 'undefined') {
            pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.4.120/pdf.worker.min.js';
        }

        ReactDOM.render(<App />, document.getElementById('root'));
    </script>
</body>
</html>